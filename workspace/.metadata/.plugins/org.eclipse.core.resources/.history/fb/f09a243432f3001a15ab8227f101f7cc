package example.app.generator;

import bag.model.bagEcore.App;
import bag.model.bagEcore.Characteristic;
import bag.model.bagEcore.DataType;
import bag.model.bagEcore.MacAddress;
import bag.model.bagEcore.MacFilter;
import bag.model.bagEcore.NameFilter;
import bag.model.bagEcore.Sensor;
import bag.model.bagEcore.Service;
import bag.model.bagEcore.UiElement;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * The generator file for all Android based generate-methods.
 */
@SuppressWarnings("all")
public class AndroidGenerator {
  private Integer counter = Integer.valueOf(0);
  
  private Integer serviceCounter = Integer.valueOf(0);
  
  private String currentService = "";
  
  /**
   * Generate-method for the 'actionbar_indeterminate_progress.xml' file.
   */
  public CharSequence generateActionbar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:layout_width=\"56dp\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:minWidth=\"56dp\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<ProgressBar android:layout_width=\"32dp\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_height=\"32dp\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_gravity=\"center\"/>");
    _builder.newLine();
    _builder.append("</FrameLayout>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'AndroidManifest.xml' file. Inside this file there is a reference to the 'packageName' and 'appNamePath' variables.
   */
  public CharSequence generateAndroidManifest(final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-feature");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:name=\"android.hardware.bluetooth_le\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:required=\"true\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-permission android:name=\"android.permission.BLUETOOTH\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<uses-permission android:name=\"android.permission.INTERNET\" />");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<application");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:allowBackup=\"true\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:icon=\"@mipmap/ic_launcher\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:label=\"@string/app_name\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:roundIcon=\"@mipmap/ic_launcher_round\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:supportsRtl=\"true\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("android:theme=\"@android:style/Theme.Holo.Light\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<activity android:name=\".DeviceScanActivity\"");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("android:label=\"@string/app_name\"");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("android:screenOrientation=\"portrait\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<intent-filter>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<action android:name=\"android.intent.action.MAIN\"/>");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<category android:name=\"android.intent.category.LAUNCHER\"/>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</intent-filter>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</activity>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<activity android:name=\".DeviceControlActivity\"/>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<service android:name=\".BluetoothLeService\" android:enabled=\"true\"/>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</application>");
    _builder.newLine();
    _builder.append("</manifest>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'build.gradle' file. There are references to 'packageName' and 'appNamePath'.
   */
  public CharSequence generateBuildGradle(final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("apply plugin: \'com.android.application\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("android {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("compileSdkVersion 29");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("buildToolsVersion \"29.0.2\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("defaultConfig {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("applicationId \"");
    _builder.append(packageName, "        ");
    _builder.append(".");
    _builder.append(appNamePath, "        ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("minSdkVersion 23");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("targetSdkVersion 29");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("versionCode 1");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("versionName \"1.0\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("buildTypes {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("release {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("minifyEnabled false");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("proguardFiles getDefaultProguardFile(\'proguard-android-optimize.txt\'), \'proguard-rules.pro\'");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("implementation fileTree(dir: \'libs\', include: [\'*.jar\'])");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("implementation \'androidx.appcompat:appcompat:1.1.0\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("testImplementation \'junit:junit:4.12\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("androidTestImplementation \'androidx.test.ext:junit:1.1.1\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("androidTestImplementation \'androidx.test.espresso:espresso-core:3.2.0\'");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("implementation \'androidx.constraintlayout:constraintlayout:1.1.3\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'listitem_device.xml' file. This file defines the layout of the list view in which the nearby BLE devices are listed.
   */
  public CharSequence generateListitem() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:orientation=\"vertical\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("android:layout_height=\"wrap_content\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<TextView android:id=\"@+id/device_name\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:textSize=\"24dp\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<TextView android:id=\"@+id/device_address\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:textSize=\"12dp\"/>");
    _builder.newLine();
    _builder.append("</LinearLayout>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'device_control_activity.xml' file. This method generates the layout file for the main activity of the application.
   * With the use of the helper variables the generate-method creates a layout  in which a new UI-element is placed relatively to an existing UI-element.
   */
  public CharSequence generateDeviceControlLayout(final Sensor sensor) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    String _xblockexpression = null;
    {
      this.counter = Integer.valueOf(0);
      _xblockexpression = "";
    }
    _builder.append(_xblockexpression, "\t");
    _builder.newLineIfNotEmpty();
    String _xblockexpression_1 = null;
    {
      this.serviceCounter = Integer.valueOf(0);
      _xblockexpression_1 = "";
    }
    _builder.append(_xblockexpression_1);
    _builder.newLineIfNotEmpty();
    String _xblockexpression_2 = null;
    {
      this.currentService = "";
      _xblockexpression_2 = "";
    }
    _builder.append(_xblockexpression_2);
    _builder.newLineIfNotEmpty();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:app=\"http://schemas.android.com/apk/res-auto\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:tools=\"http://schemas.android.com/tools\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:layout_height=\"match_parent\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tools:layout_editor_absoluteX=\"1dp\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tools:layout_editor_absoluteY=\"390dp\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<androidx.constraintlayout.widget.ConstraintLayout");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("android:layout_width=\"match_parent\"");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("android:focusable=\"true\"");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("android:focusableInTouchMode=\"true\">");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:id=\"@+id/device_name_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:layout_marginStart=\"8dp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:layout_marginTop=\"8dp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:text=\"@string/label_device_name\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:textSize=\"18sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("android:textStyle=\"bold\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("app:layout_constraintTop_toTopOf=\"parent\" />");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:id=\"@+id/device_name\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_marginStart=\"16dp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:text=\"Example\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textSize=\"18sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintStart_toEndOf=\"@+id/device_name_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintTop_toTopOf=\"@+id/device_name_header\" />");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:id=\"@+id/device_address_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_marginTop=\"8dp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:text=\"@string/label_device_address\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textSize=\"14sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textStyle=\"bold\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintStart_toStartOf=\"@+id/device_name_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/device_name_header\" />");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:id=\"@+id/device_address\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:text=\"Example\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textSize=\"14sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintStart_toStartOf=\"@+id/device_name\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintTop_toTopOf=\"@+id/device_address_header\" />");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:id=\"@+id/connection_state_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_marginTop=\"8dp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:text=\"@string/label_state\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textSize=\"14sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textStyle=\"bold\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintStart_toStartOf=\"@+id/device_address_header\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/device_address_header\" />");
    _builder.newLine();
    _builder.append(" \t\t\t");
    _builder.append("<TextView");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:id=\"@+id/connection_state\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_width=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:layout_height=\"wrap_content\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:text=\"@string/disconnected\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("android:textSize=\"14sp\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintStart_toStartOf=\"@+id/device_address\"");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.append("app:layout_constraintTop_toTopOf=\"@+id/connection_state_header\" />");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        _builder.append("\t\t\t");
        String _xblockexpression_3 = null;
        {
          this.serviceCounter = Integer.valueOf(((this.serviceCounter).intValue() + 1));
          _xblockexpression_3 = "";
        }
        _builder.append(_xblockexpression_3, "\t\t\t");
        _builder.newLineIfNotEmpty();
        {
          if (((this.serviceCounter).intValue() >= 2)) {
            _builder.append("\t\t\t");
            String _xblockexpression_4 = null;
            {
              this.currentService = sensor.getService().get(((this.serviceCounter).intValue() - 2)).getName();
              _xblockexpression_4 = "";
            }
            _builder.append(_xblockexpression_4, "\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t");
            String _xblockexpression_5 = null;
            {
              this.counter = Integer.valueOf(0);
              _xblockexpression_5 = "";
            }
            _builder.append(_xblockexpression_5, "\t\t\t");
            _builder.newLineIfNotEmpty();
          } else {
          }
        }
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            {
              UiElement _uielement = characteristic.getUielement();
              boolean _tripleNotEquals = (_uielement != null);
              if (_tripleNotEquals) {
                {
                  if ((((this.counter).intValue() == 0) && ((this.serviceCounter).intValue() == 1))) {
                    _builder.append("\t\t\t");
                    _builder.append("<TextView");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:id=\"@+id/textView");
                    String _name = characteristic.getUielement().getName();
                    _builder.append(_name, "\t\t\t\t");
                    _builder.append("Header\"");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:layout_width=\"wrap_content\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:layout_height=\"wrap_content\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:layout_marginStart=\"8dp\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:layout_marginTop=\"16dp\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:text=\"@string/label_");
                    String _name_1 = characteristic.getUielement().getName();
                    _builder.append(_name_1, "\t\t\t\t");
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:textSize=\"14sp\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("android:textStyle=\"bold\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/connection_state_header\" />");
                    _builder.newLine();
                    {
                      boolean _equals = Boolean.valueOf(characteristic.isRead()).equals(Boolean.valueOf(true));
                      if (_equals) {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_2 = characteristic.getUielement().getName();
                        _builder.append(_name_2, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        String _name_3 = characteristic.getUielement().getName();
                        _builder.append(_name_3, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_4 = characteristic.getUielement().getName();
                        _builder.append(_name_4, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"read\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/textView");
                        String _name_5 = characteristic.getUielement().getName();
                        _builder.append(_name_5, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/textView");
                        String _name_6 = characteristic.getUielement().getName();
                        _builder.append(_name_6, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/textView");
                        String _name_7 = characteristic.getUielement().getName();
                        _builder.append(_name_7, "\t\t\t\t");
                        _builder.append("ReadValue\" />\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_8 = characteristic.getUielement().getName();
                        _builder.append(_name_8, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        String _name_9 = characteristic.getUielement().getName();
                        _builder.append(_name_9, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_10 = characteristic.getUielement().getName();
                        _builder.append(_name_10, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"read\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/textView");
                        String _name_11 = characteristic.getUielement().getName();
                        _builder.append(_name_11, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/textView");
                        String _name_12 = characteristic.getUielement().getName();
                        _builder.append(_name_12, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/textView");
                        String _name_13 = characteristic.getUielement().getName();
                        _builder.append(_name_13, "\t\t\t\t");
                        _builder.append("ReadValue\" />\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      boolean _equals_1 = Boolean.valueOf(characteristic.isWrite()).equals(Boolean.valueOf(true));
                      if (_equals_1) {
                        _builder.append("\t\t\t");
                        _builder.append("<EditText");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/editView");
                        String _name_14 = characteristic.getUielement().getName();
                        _builder.append(_name_14, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:inputType=\"text\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"0\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_15 = characteristic.getUielement().getName();
                        _builder.append(_name_15, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_16 = characteristic.getUielement().getName();
                        _builder.append(_name_16, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_17 = characteristic.getUielement().getName();
                        _builder.append(_name_17, "\t\t\t\t");
                        _builder.append("Read\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_18 = characteristic.getUielement().getName();
                        _builder.append(_name_18, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"write\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/editView");
                        String _name_19 = characteristic.getUielement().getName();
                        _builder.append(_name_19, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/editView");
                        String _name_20 = characteristic.getUielement().getName();
                        _builder.append(_name_20, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/editView");
                        String _name_21 = characteristic.getUielement().getName();
                        _builder.append(_name_21, "\t\t\t\t");
                        _builder.append("WriteValue\" />");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<EditText");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/editView");
                        String _name_22 = characteristic.getUielement().getName();
                        _builder.append(_name_22, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:inputType=\"text\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"0\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_23 = characteristic.getUielement().getName();
                        _builder.append(_name_23, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_24 = characteristic.getUielement().getName();
                        _builder.append(_name_24, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_25 = characteristic.getUielement().getName();
                        _builder.append(_name_25, "\t\t\t\t");
                        _builder.append("Read\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_26 = characteristic.getUielement().getName();
                        _builder.append(_name_26, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"write\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/editView");
                        String _name_27 = characteristic.getUielement().getName();
                        _builder.append(_name_27, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/editView");
                        String _name_28 = characteristic.getUielement().getName();
                        _builder.append(_name_28, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/editView");
                        String _name_29 = characteristic.getUielement().getName();
                        _builder.append(_name_29, "\t\t\t\t");
                        _builder.append("WriteValue\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      boolean _equals_2 = Boolean.valueOf(characteristic.isNotification()).equals(Boolean.valueOf(true));
                      if (_equals_2) {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_30 = characteristic.getUielement().getName();
                        _builder.append(_name_30, "\t\t\t\t");
                        _builder.append("NotifyValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_31 = characteristic.getUielement().getName();
                        _builder.append(_name_31, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_32 = characteristic.getUielement().getName();
                        _builder.append(_name_32, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_33 = characteristic.getUielement().getName();
                        _builder.append(_name_33, "\t\t\t\t");
                        _builder.append("Write\" />");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_34 = characteristic.getUielement().getName();
                        _builder.append(_name_34, "\t\t\t\t");
                        _builder.append("NotifyValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_35 = characteristic.getUielement().getName();
                        _builder.append(_name_35, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_36 = characteristic.getUielement().getName();
                        _builder.append(_name_36, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_37 = characteristic.getUielement().getName();
                        _builder.append(_name_37, "\t\t\t\t");
                        _builder.append("Write\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t\t");
                    String _xblockexpression_6 = null;
                    {
                      this.counter = Integer.valueOf(((this.counter).intValue() + 1));
                      _xblockexpression_6 = "";
                    }
                    _builder.append(_xblockexpression_6, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  } else {
                    {
                      if (((!this.currentService.equals("")) && (!service.getName().equals(this.currentService)))) {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_38 = characteristic.getUielement().getName();
                        _builder.append(_name_38, "\t\t\t\t");
                        _builder.append("Header\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"64dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/label_");
                        String _name_39 = characteristic.getUielement().getName();
                        _builder.append(_name_39, "\t\t\t\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textStyle=\"bold\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        EList<Characteristic> _characteristic_1 = sensor.getService().get(((this.serviceCounter).intValue() - 2)).getCharacteristic();
                        int _size = sensor.getService().get(((this.serviceCounter).intValue() - 2)).getCharacteristic().size();
                        int _minus = (_size - 1);
                        String _name_40 = _characteristic_1.get(_minus).getUielement().getName();
                        _builder.append(_name_40, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        String _xblockexpression_7 = null;
                        {
                          this.currentService = service.getName();
                          _xblockexpression_7 = "";
                        }
                        _builder.append(_xblockexpression_7, "\t\t\t");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_41 = characteristic.getUielement().getName();
                        _builder.append(_name_41, "\t\t\t\t");
                        _builder.append("Header\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"64dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/label_");
                        String _name_42 = characteristic.getUielement().getName();
                        _builder.append(_name_42, "\t\t\t\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textStyle=\"bold\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        String _name_43 = service.getCharacteristic().get(((this.counter).intValue() - 1)).getUielement().getName();
                        _builder.append(_name_43, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t\t");
                    _builder.append("\t\t\t\t");
                    _builder.newLine();
                    {
                      boolean _equals_3 = Boolean.valueOf(characteristic.isRead()).equals(Boolean.valueOf(true));
                      if (_equals_3) {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_44 = characteristic.getUielement().getName();
                        _builder.append(_name_44, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        String _name_45 = characteristic.getUielement().getName();
                        _builder.append(_name_45, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_46 = characteristic.getUielement().getName();
                        _builder.append(_name_46, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"read\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/textView");
                        String _name_47 = characteristic.getUielement().getName();
                        _builder.append(_name_47, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/textView");
                        String _name_48 = characteristic.getUielement().getName();
                        _builder.append(_name_48, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/textView");
                        String _name_49 = characteristic.getUielement().getName();
                        _builder.append(_name_49, "\t\t\t\t");
                        _builder.append("ReadValue\" />");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_50 = characteristic.getUielement().getName();
                        _builder.append(_name_50, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginTop=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toStartOf=\"parent\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toBottomOf=\"@+id/textView");
                        String _name_51 = characteristic.getUielement().getName();
                        _builder.append(_name_51, "\t\t\t\t");
                        _builder.append("Header\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_52 = characteristic.getUielement().getName();
                        _builder.append(_name_52, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"read\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/textView");
                        String _name_53 = characteristic.getUielement().getName();
                        _builder.append(_name_53, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/textView");
                        String _name_54 = characteristic.getUielement().getName();
                        _builder.append(_name_54, "\t\t\t\t");
                        _builder.append("ReadValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/textView");
                        String _name_55 = characteristic.getUielement().getName();
                        _builder.append(_name_55, "\t\t\t\t");
                        _builder.append("ReadValue\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      boolean _equals_4 = Boolean.valueOf(characteristic.isWrite()).equals(Boolean.valueOf(true));
                      if (_equals_4) {
                        _builder.append("\t\t\t");
                        _builder.append("<EditText");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/editView");
                        String _name_56 = characteristic.getUielement().getName();
                        _builder.append(_name_56, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:inputType=\"text\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"0\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_57 = characteristic.getUielement().getName();
                        _builder.append(_name_57, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_58 = characteristic.getUielement().getName();
                        _builder.append(_name_58, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_59 = characteristic.getUielement().getName();
                        _builder.append(_name_59, "\t\t\t\t");
                        _builder.append("Read\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_60 = characteristic.getUielement().getName();
                        _builder.append(_name_60, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"write\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/editView");
                        String _name_61 = characteristic.getUielement().getName();
                        _builder.append(_name_61, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/editView");
                        String _name_62 = characteristic.getUielement().getName();
                        _builder.append(_name_62, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/editView");
                        String _name_63 = characteristic.getUielement().getName();
                        _builder.append(_name_63, "\t\t\t\t");
                        _builder.append("WriteValue\" />");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<EditText");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/editView");
                        String _name_64 = characteristic.getUielement().getName();
                        _builder.append(_name_64, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"8dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:inputType=\"text\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"0\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_65 = characteristic.getUielement().getName();
                        _builder.append(_name_65, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_66 = characteristic.getUielement().getName();
                        _builder.append(_name_66, "\t\t\t\t");
                        _builder.append("Read\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_67 = characteristic.getUielement().getName();
                        _builder.append(_name_67, "\t\t\t\t");
                        _builder.append("Read\" />");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("<Button");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/button");
                        String _name_68 = characteristic.getUielement().getName();
                        _builder.append(_name_68, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("style=\"@style/Widget.AppCompat.Button.Small\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"4dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"write\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"12sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:clickable=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/editView");
                        String _name_69 = characteristic.getUielement().getName();
                        _builder.append(_name_69, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/editView");
                        String _name_70 = characteristic.getUielement().getName();
                        _builder.append(_name_70, "\t\t\t\t");
                        _builder.append("WriteValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/editView");
                        String _name_71 = characteristic.getUielement().getName();
                        _builder.append(_name_71, "\t\t\t\t");
                        _builder.append("WriteValue\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    {
                      boolean _equals_5 = Boolean.valueOf(characteristic.isNotification()).equals(Boolean.valueOf(true));
                      if (_equals_5) {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_72 = characteristic.getUielement().getName();
                        _builder.append(_name_72, "\t\t\t\t");
                        _builder.append("NotifyValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_73 = characteristic.getUielement().getName();
                        _builder.append(_name_73, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_74 = characteristic.getUielement().getName();
                        _builder.append(_name_74, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_75 = characteristic.getUielement().getName();
                        _builder.append(_name_75, "\t\t\t\t");
                        _builder.append("Write\" />");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t\t");
                        _builder.append("<TextView");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:id=\"@+id/textView");
                        String _name_76 = characteristic.getUielement().getName();
                        _builder.append(_name_76, "\t\t\t\t");
                        _builder.append("NotifyValue\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_width=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_height=\"wrap_content\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:layout_marginStart=\"16dp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:text=\"@string/no_data\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:textSize=\"14sp\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("android:enabled=\"false\"");
                        _builder.newLine();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintBottom_toBottomOf=\"@+id/button");
                        String _name_77 = characteristic.getUielement().getName();
                        _builder.append(_name_77, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintStart_toEndOf=\"@+id/button");
                        String _name_78 = characteristic.getUielement().getName();
                        _builder.append(_name_78, "\t\t\t\t");
                        _builder.append("Write\"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t");
                        _builder.append("\t");
                        _builder.append("app:layout_constraintTop_toTopOf=\"@+id/button");
                        String _name_79 = characteristic.getUielement().getName();
                        _builder.append(_name_79, "\t\t\t\t");
                        _builder.append("Write\" />");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t\t");
                    String _xblockexpression_8 = null;
                    {
                      this.counter = Integer.valueOf(((this.counter).intValue() + 1));
                      _xblockexpression_8 = "";
                    }
                    _builder.append(_xblockexpression_8, "\t\t\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("    \t");
    _builder.append("</androidx.constraintlayout.widget.ConstraintLayout>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</ScrollView>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'gatt_services.xml' file. This file is for defining the layout of the second menu of the application.
   */
  public CharSequence generateGattServices() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_refresh\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:checkable=\"false\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"1\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_connect\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:title=\"@string/menu_connect\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"100\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom|withText\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_disconnect\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:title=\"@string/menu_disconnect\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"101\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom|withText\"/>");
    _builder.newLine();
    _builder.append("</menu>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'main.xml' file. This file is for defining the layout of the main menu of the application.
   */
  public CharSequence generateMainXml() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
    _builder.newLine();
    _builder.append("<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_refresh\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:checkable=\"false\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"1\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_scan\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:title=\"@string/menu_scan\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"100\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom|withText\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<item android:id=\"@+id/menu_stop\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:title=\"@string/menu_stop\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:orderInCategory=\"101\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("android:showAsAction=\"ifRoom|withText\"/>");
    _builder.newLine();
    _builder.append("</menu>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'colors.xml' file. This file is for defining the color schema of the application.
   */
  public CharSequence generateColors() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<resources>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<color name=\"colorPrimary\">#008577</color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<color name=\"colorPrimaryDark\">#00574B</color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<color name=\"colorAccent\">#D81B60</color>");
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'styles.xml' file. This file is for defining the style of the application.
   */
  public CharSequence generateStyles() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<resources>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Base application theme. -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- Customize your theme here. -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<item name=\"colorPrimary\">@color/colorPrimary</item>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<item name=\"colorAccent\">@color/colorAccent</item>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'strings.xml' file. This file stores the defined strings for the application environment.
   */
  public CharSequence generateStrings(final Sensor sensor, final String appName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<resources>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"app_name\">");
    _builder.append(appName, "    ");
    _builder.append("</string>");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<string name=\"ble_not_supported\">BLE is not supported</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"label_device_name\">Bluetooth Name:</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"label_device_address\">Bluetooth Adresse:</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"label_state\">Status:</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"no_data\">No data</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"connected\">Verbunden</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"disconnected\">Nicht verbunden</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"title_devices\">BLE Geräte suche</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"error_bluetooth_not_supported\">Bluetooth not supported.</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"unknown_device\">Unknown device</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"unknown_characteristic\">Unknown characteristic</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"unknown_service\">Unknown service</string>");
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            {
              UiElement _uielement = characteristic.getUielement();
              boolean _tripleNotEquals = (_uielement != null);
              if (_tripleNotEquals) {
                _builder.append("    ");
                _builder.append("<string name=\"label_");
                String _name = characteristic.getUielement().getName();
                _builder.append(_name, "    ");
                _builder.append("\">");
                String _label = characteristic.getUielement().getLabel();
                _builder.append(_label, "    ");
                _builder.append("</string>");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("<!-- Menu items -->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_connect\">Verbinden</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_disconnect\">Verbindung trennen</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_ad\">AD</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_value\">Werte</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_scan\">Scan</string>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<string name=\"menu_stop\">Stop</string>");
    _builder.newLine();
    _builder.append("</resources>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'GattAttributes.java' file. This file stores the defined GATT characteristics and services of the described BLE device.
   */
  public CharSequence generateGattAttributes(final Sensor sensor, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class GattAttributes {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static HashMap<String, String> attributes = new HashMap();");
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        _builder.append("    ");
        _builder.append("public static String ");
        String _name = service.getName();
        _builder.append(_name, "    ");
        _builder.append(" = \"");
        String _uuid = service.getUuid();
        _builder.append(_uuid, "    ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            _builder.append("    ");
            _builder.append("public static String ");
            String _name_1 = characteristic.getName();
            _builder.append(_name_1, "    ");
            _builder.append(" = \"");
            String _uuid_1 = characteristic.getUuid();
            _builder.append(_uuid_1, "    ");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("public static String DESCRIPTOR_CUD = \"00002901-0000-1000-8000-00805f9b34fb\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static String DESCRIPTOR_CCCD = \"00002902-0000-1000-8000-00805f9b34fb\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static {");
    _builder.newLine();
    {
      EList<Service> _service_1 = sensor.getService();
      for(final Service service_1 : _service_1) {
        _builder.append("    \t");
        _builder.append("attributes.put(");
        String _name_2 = service_1.getName();
        _builder.append(_name_2, "    \t");
        _builder.append(", \"");
        String _name_3 = service_1.getName();
        _builder.append(_name_3, "    \t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<Characteristic> _characteristic_1 = service_1.getCharacteristic();
          for(final Characteristic characteristic_1 : _characteristic_1) {
            _builder.append("    \t");
            _builder.append("attributes.put(");
            String _name_4 = characteristic_1.getName();
            _builder.append(_name_4, "    \t");
            _builder.append(", \"");
            String _name_5 = characteristic_1.getName();
            _builder.append(_name_5, "    \t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("        ");
    _builder.append("attributes.put(DESCRIPTOR_CUD, \"\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("attributes.put(DESCRIPTOR_CCCD, \"\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static String lookup(String uuid, String defaultName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String name = attributes.get(uuid);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return name == null ? defaultName : name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'DeviceScanActivity.java' file. This files contains the functionality of searching, finding and connecting to nearby BLE devices.
   */
  public CharSequence generateDeviceScan(final App app, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import android.Manifest;");
    _builder.newLine();
    _builder.append("import android.app.Activity;");
    _builder.newLine();
    _builder.append("import android.app.ListActivity;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothAdapter;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothDevice;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothManager;");
    _builder.newLine();
    _builder.append("import android.bluetooth.le.BluetoothLeScanner;");
    _builder.newLine();
    _builder.append("import android.bluetooth.le.ScanCallback;");
    _builder.newLine();
    _builder.append("import android.bluetooth.le.ScanResult;");
    _builder.newLine();
    _builder.append("import android.bluetooth.le.ScanSettings;");
    _builder.newLine();
    _builder.append("import android.bluetooth.le.ScanFilter;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.Intent;");
    _builder.newLine();
    _builder.append("import android.content.pm.PackageManager;");
    _builder.newLine();
    _builder.append("import android.os.Bundle;");
    _builder.newLine();
    _builder.append("import android.os.Handler;");
    _builder.newLine();
    _builder.append("import android.util.Log;");
    _builder.newLine();
    _builder.append("import android.view.LayoutInflater;");
    _builder.newLine();
    _builder.append("import android.view.Menu;");
    _builder.newLine();
    _builder.append("import android.view.MenuItem;");
    _builder.newLine();
    _builder.append("import android.view.View;");
    _builder.newLine();
    _builder.append("import android.view.ViewGroup;");
    _builder.newLine();
    _builder.append("import android.widget.BaseAdapter;");
    _builder.newLine();
    _builder.append("import android.widget.ListView;");
    _builder.newLine();
    _builder.append("import android.widget.TextView;");
    _builder.newLine();
    _builder.append("import android.widget.Toast;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class DeviceScanActivity extends ListActivity {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private LeDeviceListAdapter mLeDeviceListAdapter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothAdapter mBluetoothAdapter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothLeScanner mBluetoothLeScanner;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean mScanning;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Handler mHandler;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final int REQUEST_ENABLE_BT = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long SCAN_PERIOD = 10000;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// For filtering define deviceAddress, filters and settings");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String[] deviceAddresses;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<ScanFilter> filters = new ArrayList<ScanFilter>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ScanSettings settings;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void onCreate(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onCreate(savedInstanceState);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getActionBar().setTitle(R.string.title_devices);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mHandler = new Handler();");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String[] PERMISSIONS = {Manifest.permission.ACCESS_COARSE_LOCATION};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("requestPermissions(PERMISSIONS, 9);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("finish();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    {
      MacFilter _macfilter = app.getMacfilter();
      boolean _tripleNotEquals = (_macfilter != null);
      if (_tripleNotEquals) {
        _builder.append("        ");
        _builder.append("ArrayList<String> addresses = new ArrayList<String>();");
        _builder.newLine();
        {
          EList<MacAddress> _macaddress = app.getMacfilter().getMacaddress();
          for(final MacAddress macAddress : _macaddress) {
            _builder.append("        ");
            _builder.append("addresses.add(\"");
            String _address = macAddress.getAddress();
            _builder.append(_address, "        ");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("        ");
        _builder.append("deviceAddresses = (String[]) addresses.toArray();");
        _builder.newLine();
      } else {
      }
    }
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothAdapter = bluetoothManager.getAdapter();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/* Define ScanSettings with desired SCAN_MODE, create filter from defined deviceAddress and add filter to list of filters");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SCAN_MODE: BALANCED = balanced power mode, LOW_LATENCY = highest duty cycle, LOW_POWER = low power mode, OPPORTUNISTIC = special scan mode */");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("settings = new ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_BALANCED).build();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(deviceAddresses != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(int i = 0; i < deviceAddresses.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(deviceAddresses[i] != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ScanFilter filter = new ScanFilter.Builder().setDeviceAddress(deviceAddresses[i]).build();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("filters.add(filter);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Toast.makeText(this, R.string.error_bluetooth_not_supported, Toast.LENGTH_SHORT).show();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("finish();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onCreateOptionsMenu(Menu menu) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getMenuInflater().inflate(R.menu.main, menu);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!mScanning) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_stop).setVisible(false);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_scan).setVisible(true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_refresh).setActionView(null);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_stop).setVisible(true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_scan).setVisible(false);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_refresh).setActionView(");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("R.layout.actionbar_indeterminate_progress);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onOptionsItemSelected(MenuItem item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (item.getItemId()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case R.id.menu_scan:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mLeDeviceListAdapter.clear();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scanLeDevice(true);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case R.id.menu_stop:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scanLeDevice(false);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onResume() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onResume();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!mBluetoothAdapter.isEnabled()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!mBluetoothAdapter.isEnabled()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mLeDeviceListAdapter = new LeDeviceListAdapter();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setListAdapter(mLeDeviceListAdapter);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("scanLeDevice(true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onActivityResult(int requestCode, int resultCode, Intent data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (requestCode == REQUEST_ENABLE_BT && resultCode == Activity.RESULT_CANCELED) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("finish();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onActivityResult(requestCode, resultCode, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onPause() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onPause();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("scanLeDevice(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mLeDeviceListAdapter.clear();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onListItemClick(ListView l, View v, int position, long id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BluetoothDevice device = mLeDeviceListAdapter.getDevice(position);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (device == null) return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Intent intent = new Intent(this, DeviceControlActivity.class);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intent.putExtra(DeviceControlActivity.EXTRAS_DEVICE_NAME, device.getName());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intent.putExtra(DeviceControlActivity.EXTRAS_DEVICE_ADDRESS, device.getAddress());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mScanning) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(mBluetoothAdapter.isEnabled() && mBluetoothLeScanner != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mBluetoothLeScanner.stopScan(mLeScanCallback);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mScanning = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("startActivity(intent);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void scanLeDevice(final boolean enable) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (enable) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mHandler.postDelayed(new Runnable() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("mScanning = false;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(mBluetoothLeScanner != null && mBluetoothAdapter.isEnabled()) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("mBluetoothLeScanner.stopScan(mLeScanCallback);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("invalidateOptionsMenu();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, SCAN_PERIOD);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mScanning = true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothLeScanner.startScan(filters, settings, mLeScanCallback);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mScanning = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothLeScanner.stopScan(mLeScanCallback);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("invalidateOptionsMenu();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private class LeDeviceListAdapter extends BaseAdapter {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private ArrayList<BluetoothDevice> mLeDevices;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("private LayoutInflater mInflator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public LeDeviceListAdapter() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mLeDevices = new ArrayList<>();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mInflator = DeviceScanActivity.this.getLayoutInflater();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void addDevice(BluetoothDevice device) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(!mLeDevices.contains(device)) {");
    _builder.newLine();
    {
      NameFilter _namefilter = app.getNamefilter();
      boolean _tripleNotEquals_1 = (_namefilter != null);
      if (_tripleNotEquals_1) {
        _builder.append("            \t");
        _builder.append("if(device.getName().matches(\"");
        String _regEx = app.getNamefilter().getName().getRegEx();
        _builder.append(_regEx, "            \t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("            \t");
        _builder.append("\t");
        _builder.append("mLeDevices.add(device);");
        _builder.newLine();
        _builder.append("            \t");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("            \t");
        _builder.append("mLeDevices.add(device);");
        _builder.newLine();
      }
    }
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public BluetoothDevice getDevice(int position) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return mLeDevices.get(position);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void clear() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mLeDevices.clear();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public int getCount() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return mLeDevices.size();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public Object getItem(int i) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return mLeDevices.get(i);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public long getItemId(int i) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public View getView(int i, View view, ViewGroup viewGroup) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ViewHolder viewHolder;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (view == null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("view = mInflator.inflate(R.layout.listitem_device, null);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder = new ViewHolder();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder.deviceAddress = view.findViewById(R.id.device_address);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder.deviceName = view.findViewById(R.id.device_name);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("view.setTag(viewHolder);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder = (ViewHolder) view.getTag();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BluetoothDevice device = mLeDevices.get(i);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final String deviceName = device.getName();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (deviceName != null && deviceName.length() > 0)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder.deviceName.setText(deviceName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("viewHolder.deviceName.setText(R.string.unknown_device);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("viewHolder.deviceAddress.setText(device.getAddress());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return view;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ScanCallback mLeScanCallback = new ScanCallback() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onScanResult(int callbackType, ScanResult result) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("super.onScanResult(callbackType, result);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("BluetoothDevice device = result.getDevice();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(device != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.i(\"RSSI\", device.getName() + \", rssi: \" + result.getRssi() + \", scanRecord: \" + result.getScanRecord().toString());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mLeDeviceListAdapter.addDevice(result.getDevice());");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mLeDeviceListAdapter.notifyDataSetChanged();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onBatchScanResults(List<ScanResult> results) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("super.onBatchScanResults(results);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onScanFailed(int errorCode) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("super.onScanFailed(errorCode);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static class ViewHolder {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("TextView deviceName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("TextView deviceAddress;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'BluetoothLeService.java' file. This files contains the underlying BLE functionality which is necessary to use BLE inside an application.
   */
  public CharSequence generateBluetoothLeService(final Sensor sensor, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import android.app.Service;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothAdapter;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothDevice;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGatt;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattCallback;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattCharacteristic;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattDescriptor;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattService;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothManager;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothProfile;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.Intent;");
    _builder.newLine();
    _builder.append("import android.os.Binder;");
    _builder.newLine();
    _builder.append("import android.os.IBinder;");
    _builder.newLine();
    _builder.append("import android.util.Log;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.UUID;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BluetoothLeService extends Service {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final static String TAG = BluetoothLeService.class.getSimpleName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothManager mBluetoothManager;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothAdapter mBluetoothAdapter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String mBluetoothDeviceAddress;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothGatt mBluetoothGatt;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int mConnectionState = STATE_DISCONNECTED;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private DataStruct mDataStruct;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final int STATE_DISCONNECTED = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final int STATE_CONNECTING = 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final int STATE_CONNECTED = 2;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final static String ACTION_GATT_CONNECTED = \"com.example.bluetooth.le.ACTION_GATT_CONNECTED\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final static String ACTION_GATT_DISCONNECTED = \"com.example.bluetooth.le.ACTION_GATT_DISCONNECTED\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final static String ACTION_GATT_SERVICES_DISCOVERED = \"com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final static String ACTION_DATA_AVAILABLE = \"com.example.bluetooth.le.ACTION_DATA_AVAILABLE\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public final static String EXTRA_DATA = \"com.example.bluetooth.le.EXTRA_DATA\";");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            _builder.append("\t");
            _builder.append("public final static UUID UUID_CHARACTERISTIC_");
            String _name = characteristic.getName();
            _builder.append(_name, "\t");
            _builder.append(" = UUID.fromString(GattAttributes.");
            String _name_1 = characteristic.getName();
            _builder.append(_name_1, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String intentAction;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (newState == BluetoothProfile.STATE_CONNECTED) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("intentAction = ACTION_GATT_CONNECTED;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnectionState = STATE_CONNECTED;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("broadcastUpdate(intentAction);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.i(TAG, \"Connected to GATT server.\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.i(TAG, \"Attempting to start service discovery:\" + mBluetoothGatt.discoverServices());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (newState == BluetoothProfile.STATE_DISCONNECTED) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("intentAction = ACTION_GATT_DISCONNECTED;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnectionState = STATE_DISCONNECTED;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.i(TAG, \"Disconnected from GATT server.\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("broadcastUpdate(intentAction);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onServicesDiscovered(BluetoothGatt gatt, int status) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (status == BluetoothGatt.GATT_SUCCESS) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.w(TAG, \"onServicesDiscovered received: \" + status);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic,");
    _builder.newLine();
    _builder.append("                                         ");
    _builder.append("int status) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (status == BluetoothGatt.GATT_SUCCESS) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void broadcastUpdate(final String action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Intent intent = new Intent(action);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sendBroadcast(intent);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void broadcastUpdate(final String action, final BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Intent intent = new Intent(action);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final byte[] data = characteristic.getValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    {
      EList<Service> _service_1 = sensor.getService();
      for(final Service service_1 : _service_1) {
        {
          EList<Characteristic> _characteristic_1 = service_1.getCharacteristic();
          for(final Characteristic characteristic_1 : _characteristic_1) {
            _builder.append("\t\t");
            _builder.append("if(UUID_CHARACTERISTIC_");
            String _name_2 = characteristic_1.getName();
            _builder.append(_name_2, "\t\t");
            _builder.append(".equals(characteristic.getUuid())) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("intent.putExtra(EXTRA_DATA, \"");
            String _name_3 = characteristic_1.getName();
            _builder.append(_name_3, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("mDataStruct.set");
            String _name_4 = characteristic_1.getName();
            _builder.append(_name_4, "\t\t\t");
            _builder.append("(data);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("else {}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sendBroadcast(intent);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public DataStruct getDataStruct(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return mDataStruct;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public class LocalBinder extends Binder {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("BluetoothLeService getService() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return BluetoothLeService.this;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public IBinder onBind(Intent intent) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return mBinder;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onUnbind(Intent intent) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("close();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.onUnbind(intent);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final IBinder mBinder = new LocalBinder();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean initialize() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothManager == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (mBluetoothManager == null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.e(TAG, \"Unable to initialize BluetoothManager.\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothAdapter = mBluetoothManager.getAdapter();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.e(TAG, \"Unable to obtain a BluetoothAdapter.\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mDataStruct = new DataStruct();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean connect(final String address) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null || address == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"BluetoothAdapter not initialized or unspecified address.\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("&& mBluetoothGatt != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.d(TAG, \"Trying to use an existing mBluetoothGatt for connection.\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (mBluetoothGatt.connect()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnectionState = STATE_CONNECTING;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (device == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"Device not found.  Unable to connect.\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt = device.connectGatt(this, false, mGattCallback);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Log.d(TAG, \"Trying to create a new connection.\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothDeviceAddress = address;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mConnectionState = STATE_CONNECTING;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void disconnect() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null || mBluetoothGatt == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"BluetoothAdapter not initialized\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt.disconnect();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void close() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothGatt == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt.close();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void readCharacteristic(BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null || mBluetoothGatt == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"BluetoothAdapter not initialized\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt.readCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void writeCharacteristic(BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null || mBluetoothGatt == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"BluetoothAdapter not initialized\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothAdapter == null || mBluetoothGatt == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.w(TAG, \"BluetoothAdapter not initialized\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Service> _service_2 = sensor.getService();
      for(final Service service_2 : _service_2) {
        {
          EList<Characteristic> _characteristic_2 = service_2.getCharacteristic();
          for(final Characteristic characteristic_2 : _characteristic_2) {
            {
              boolean _isNotification = characteristic_2.isNotification();
              if (_isNotification) {
                _builder.append("\t\t");
                _builder.append("if(UUID_CHARACTERISTIC_");
                String _name_5 = characteristic_2.getName();
                _builder.append(_name_5, "\t\t");
                _builder.append(".equals(characteristic.getUuid())) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(GattAttributes.DESCRIPTOR_CCCD));");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("    ");
                _builder.append("descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("mBluetoothGatt.writeDescriptor(descriptor);");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public List<BluetoothGattService> getSupportedGattServices() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothGatt == null) return null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return mBluetoothGatt.getServices();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'DeviceControlActivity.java' file. This file contains the main functionality of the main activity of the application.
   */
  public CharSequence generateDeviceControlActivity(final Sensor sensor, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("import android.app.Activity;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattCharacteristic;");
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattService;");
    _builder.newLine();
    _builder.append("import android.content.BroadcastReceiver;");
    _builder.newLine();
    _builder.append("import android.content.ComponentName;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import android.content.Intent;");
    _builder.newLine();
    _builder.append("import android.content.IntentFilter;");
    _builder.newLine();
    _builder.append("import android.content.ServiceConnection;");
    _builder.newLine();
    _builder.append("import android.os.Bundle;");
    _builder.newLine();
    _builder.append("import android.os.IBinder;");
    _builder.newLine();
    _builder.append("import android.util.Log;");
    _builder.newLine();
    _builder.append("import android.view.Menu;");
    _builder.newLine();
    _builder.append("import android.view.MenuItem;");
    _builder.newLine();
    _builder.append("import android.view.View;");
    _builder.newLine();
    _builder.append("import android.widget.Button;");
    _builder.newLine();
    _builder.append("import android.widget.EditText;");
    _builder.newLine();
    _builder.append("import android.widget.TextView;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.UUID;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class DeviceControlActivity extends Activity {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final static String TAG = DeviceControlActivity.class.getSimpleName();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final String EXTRAS_DEVICE_NAME = \"DEVICE_NAME\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final String EXTRAS_DEVICE_ADDRESS = \"DEVICE_ADDRESS\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("   \t");
    _builder.append("private TextView mAddress;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TextView mName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TextView mConnectionState;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            {
              UiElement _uielement = characteristic.getUielement();
              boolean _tripleNotEquals = (_uielement != null);
              if (_tripleNotEquals) {
                {
                  boolean _equals = Boolean.valueOf(characteristic.isRead()).equals(Boolean.valueOf(true));
                  if (_equals) {
                    _builder.append("\t");
                    _builder.append("private TextView textView");
                    String _name = characteristic.getUielement().getName();
                    _builder.append(_name, "\t");
                    _builder.append("ReadValue; ");
                    {
                      String _description = characteristic.getUielement().getDescription();
                      boolean _tripleNotEquals_1 = (_description != null);
                      if (_tripleNotEquals_1) {
                        _builder.append(" // ");
                        String _description_1 = characteristic.getUielement().getDescription();
                        _builder.append(_description_1, "\t");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("private Button button");
                    String _name_1 = characteristic.getUielement().getName();
                    _builder.append(_name_1, "\t");
                    _builder.append("Read;");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
                {
                  boolean _equals_1 = Boolean.valueOf(characteristic.isWrite()).equals(Boolean.valueOf(true));
                  if (_equals_1) {
                    _builder.append("\t");
                    _builder.append("private EditText editText");
                    String _name_2 = characteristic.getUielement().getName();
                    _builder.append(_name_2, "\t");
                    _builder.append("WriteValue; ");
                    {
                      String _description_2 = characteristic.getUielement().getDescription();
                      boolean _tripleNotEquals_2 = (_description_2 != null);
                      if (_tripleNotEquals_2) {
                        _builder.append(" // ");
                        String _description_3 = characteristic.getUielement().getDescription();
                        _builder.append(_description_3, "\t");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("private Button button");
                    String _name_3 = characteristic.getUielement().getName();
                    _builder.append(_name_3, "\t");
                    _builder.append("Write; ");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
                {
                  boolean _equals_2 = Boolean.valueOf(characteristic.isNotification()).equals(Boolean.valueOf(true));
                  if (_equals_2) {
                    _builder.append("\t");
                    _builder.append("private TextView textView");
                    String _name_4 = characteristic.getUielement().getName();
                    _builder.append(_name_4, "\t");
                    _builder.append("NotifyValue; ");
                    {
                      String _description_4 = characteristic.getUielement().getDescription();
                      boolean _tripleNotEquals_3 = (_description_4 != null);
                      if (_tripleNotEquals_3) {
                        _builder.append(" // ");
                        String _description_5 = characteristic.getUielement().getDescription();
                        _builder.append(_description_5, "\t");
                      }
                    }
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String mDeviceName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String mDeviceAddress;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private BluetoothLeService mBluetoothLeService;");
    _builder.newLine();
    {
      EList<Service> _service_1 = sensor.getService();
      for(final Service service_1 : _service_1) {
        {
          EList<Characteristic> _characteristic_1 = service_1.getCharacteristic();
          for(final Characteristic characteristic_1 : _characteristic_1) {
            _builder.append("\t");
            _builder.append("private BluetoothGattCharacteristic gattCharacteristic");
            String _name_5 = characteristic_1.getName();
            _builder.append(_name_5, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private boolean mConnected = false;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Helper helper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final ServiceConnection mServiceConnection = new ServiceConnection() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onServiceConnected(ComponentName componentName, IBinder service) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothLeService = ((BluetoothLeService.LocalBinder) service).getService();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("helper = new Helper(mBluetoothLeService);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!mBluetoothLeService.initialize()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Log.e(TAG, \"Unable to initialize Bluetooth\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("finish();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothLeService.connect(mDeviceAddress);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onServiceDisconnected(ComponentName componentName) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("mBluetoothLeService = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("public void onReceive(Context context, Intent intent) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final String action = intent.getAction();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (BluetoothLeService.ACTION_GATT_CONNECTED.equals(action)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnected = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("updateConnectionState(R.string.connected);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("invalidateOptionsMenu();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnected = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("updateConnectionState(R.string.disconnected);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("invalidateOptionsMenu();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("clearUI();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED.equals(action)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("List<BluetoothGattService> gattServices = mBluetoothLeService.getSupportedGattServices();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for(BluetoothGattService s:gattServices) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("List<BluetoothGattCharacteristic> gattCharacteristic = s.getCharacteristics();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("for (BluetoothGattCharacteristic c : gattCharacteristic) {");
    _builder.newLine();
    {
      EList<Service> _service_2 = sensor.getService();
      for(final Service service_2 : _service_2) {
        {
          EList<Characteristic> _characteristic_2 = service_2.getCharacteristic();
          for(final Characteristic characteristic_2 : _characteristic_2) {
            _builder.append("                    \t");
            _builder.append("if(c.getUuid().equals(UUID.fromString(GattAttributes.");
            String _name_6 = characteristic_2.getName();
            _builder.append(_name_6, "                    \t");
            _builder.append("))) {");
            _builder.newLineIfNotEmpty();
            _builder.append("                    \t");
            _builder.append("\t");
            _builder.append("gattCharacteristic");
            String _name_7 = characteristic_2.getName();
            _builder.append(_name_7, "                    \t\t");
            _builder.append(" = c;");
            _builder.newLineIfNotEmpty();
            {
              boolean _isRead = characteristic_2.isRead();
              if (_isRead) {
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("helper.readCharacteristic(gattCharacteristic");
                String _name_8 = characteristic_2.getName();
                _builder.append(_name_8, "                    \t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("try {");
                _builder.newLine();
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("Thread.sleep(500);");
                _builder.newLine();
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("} catch (InterruptedException e) {");
                _builder.newLine();
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("                    \t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("                    \t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Service> _service_3 = sensor.getService();
      for(final Service service_3 : _service_3) {
        {
          EList<Characteristic> _characteristic_3 = service_3.getCharacteristic();
          for(final Characteristic characteristic_3 : _characteristic_3) {
            {
              boolean _isNotification = characteristic_3.isNotification();
              if (_isNotification) {
                _builder.append("\t\t\t\t");
                _builder.append("if(gattCharacteristic");
                String _name_9 = characteristic_3.getName();
                _builder.append(_name_9, "\t\t\t\t");
                _builder.append(" != null) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("helper.setCharacteristicNotification(gattCharacteristic");
                String _name_10 = characteristic_3.getName();
                _builder.append(_name_10, "\t\t\t\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("try {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t");
                _builder.append("Thread.sleep(500);");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("} catch (InterruptedException e) {");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t\t");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (BluetoothLeService.ACTION_DATA_AVAILABLE.equals(action)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("displayData(intent.getStringExtra(BluetoothLeService.EXTRA_DATA));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void clearUI() {");
    _builder.newLine();
    {
      EList<Service> _service_4 = sensor.getService();
      for(final Service service_4 : _service_4) {
        {
          EList<Characteristic> _characteristic_4 = service_4.getCharacteristic();
          for(final Characteristic characteristic_4 : _characteristic_4) {
            {
              UiElement _uielement_1 = characteristic_4.getUielement();
              boolean _tripleNotEquals_4 = (_uielement_1 != null);
              if (_tripleNotEquals_4) {
                {
                  boolean _equals_3 = Boolean.valueOf(characteristic_4.isRead()).equals(Boolean.valueOf(true));
                  if (_equals_3) {
                    _builder.append("    \t");
                    _builder.append("textView");
                    String _name_11 = characteristic_4.getUielement().getName();
                    _builder.append(_name_11, "    \t");
                    _builder.append("ReadValue.setText(R.string.no_data);");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
                {
                  boolean _equals_4 = Boolean.valueOf(characteristic_4.isWrite()).equals(Boolean.valueOf(true));
                  if (_equals_4) {
                    _builder.append("    \t");
                    _builder.append("editText");
                    String _name_12 = characteristic_4.getUielement().getName();
                    _builder.append(_name_12, "    \t");
                    _builder.append("WriteValue.setText(\"0\");");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
                {
                  boolean _equals_5 = Boolean.valueOf(characteristic_4.isNotification()).equals(Boolean.valueOf(true));
                  if (_equals_5) {
                    _builder.append("    \t");
                    _builder.append("textView");
                    String _name_13 = characteristic_4.getUielement().getName();
                    _builder.append(_name_13, "    \t");
                    _builder.append("NotifyValue.setText(R.string.no_data);");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
              } else {
              }
            }
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void onCreate(Bundle savedInstanceState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onCreate(savedInstanceState);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setContentView(R.layout.device_control_activity);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final Intent intent = getIntent();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mDeviceName = intent.getStringExtra(EXTRAS_DEVICE_NAME);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mDeviceAddress = intent.getStringExtra(EXTRAS_DEVICE_ADDRESS);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mName = findViewById(R.id.device_name);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mName.setText(mDeviceName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mAddress = findViewById(R.id.device_address);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mAddress.setText(mDeviceAddress);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mConnectionState = findViewById(R.id.connection_state);");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    {
      EList<Service> _service_5 = sensor.getService();
      for(final Service service_5 : _service_5) {
        {
          EList<Characteristic> _characteristic_5 = service_5.getCharacteristic();
          for(final Characteristic characteristic_5 : _characteristic_5) {
            {
              UiElement _uielement_2 = characteristic_5.getUielement();
              boolean _tripleNotEquals_5 = (_uielement_2 != null);
              if (_tripleNotEquals_5) {
                {
                  boolean _equals_6 = Boolean.valueOf(characteristic_5.isRead()).equals(Boolean.valueOf(true));
                  if (_equals_6) {
                    _builder.append("        ");
                    _builder.append("textView");
                    String _name_14 = characteristic_5.getUielement().getName();
                    _builder.append(_name_14, "        ");
                    _builder.append("ReadValue = findViewById(R.id.textView");
                    String _name_15 = characteristic_5.getUielement().getName();
                    _builder.append(_name_15, "        ");
                    _builder.append("ReadValue);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("button");
                    String _name_16 = characteristic_5.getUielement().getName();
                    _builder.append(_name_16, "        ");
                    _builder.append("Read = findViewById(R.id.button");
                    String _name_17 = characteristic_5.getUielement().getName();
                    _builder.append(_name_17, "        ");
                    _builder.append("Read);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("button");
                    String _name_18 = characteristic_5.getUielement().getName();
                    _builder.append(_name_18, "        ");
                    _builder.append("Read.setOnClickListener(new View.OnClickListener() {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("\t");
                    _builder.append("public void onClick(View v) {");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("\t\t");
                    _builder.append("helper.readCharacteristic(gattCharacteristic");
                    String _name_19 = characteristic_5.getName();
                    _builder.append(_name_19, "        \t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("});");
                    _builder.newLine();
                  } else {
                  }
                }
                {
                  boolean _equals_7 = Boolean.valueOf(characteristic_5.isWrite()).equals(Boolean.valueOf(true));
                  if (_equals_7) {
                    _builder.append("        ");
                    _builder.append("editText");
                    String _name_20 = characteristic_5.getUielement().getName();
                    _builder.append(_name_20, "        ");
                    _builder.append("WriteValue = findViewById(R.id.editView");
                    String _name_21 = characteristic_5.getUielement().getName();
                    _builder.append(_name_21, "        ");
                    _builder.append("WriteValue);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("button");
                    String _name_22 = characteristic_5.getUielement().getName();
                    _builder.append(_name_22, "        ");
                    _builder.append("Write = findViewById(R.id.button");
                    String _name_23 = characteristic_5.getUielement().getName();
                    _builder.append(_name_23, "        ");
                    _builder.append("Write);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("button");
                    String _name_24 = characteristic_5.getUielement().getName();
                    _builder.append(_name_24, "        ");
                    _builder.append("Write.setOnClickListener(new View.OnClickListener() {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("\t");
                    _builder.append("public void onClick(View v) {");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("\t\t");
                    _builder.append("if(!editText");
                    String _name_25 = characteristic_5.getUielement().getName();
                    _builder.append(_name_25, "        \t\t");
                    _builder.append("WriteValue.getText().toString().isEmpty()) {");
                    _builder.newLineIfNotEmpty();
                    {
                      boolean _equals_8 = characteristic_5.getDataType().equals(DataType.DOUBLE);
                      if (_equals_8) {
                        _builder.append("        ");
                        _builder.append("\t\t\t");
                        _builder.append("double value = Double.valueOf(editText");
                        String _name_26 = characteristic_5.getUielement().getName();
                        _builder.append(_name_26, "        \t\t\t");
                        _builder.append("WriteValue.getText().toString());");
                        _builder.newLineIfNotEmpty();
                        _builder.append("        ");
                        _builder.append("\t\t\t");
                        _builder.append("helper.writeCharacteristicDouble(gattCharacteristic");
                        String _name_27 = characteristic_5.getName();
                        _builder.append(_name_27, "        \t\t\t");
                        _builder.append(", value);");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equals_9 = characteristic_5.getDataType().equals(DataType.FLOAT);
                        if (_equals_9) {
                          _builder.append("        ");
                          _builder.append("\t\t\t");
                          _builder.append("float value = Float.valueOf(editText");
                          String _name_28 = characteristic_5.getUielement().getName();
                          _builder.append(_name_28, "        \t\t\t");
                          _builder.append("WriteValue.getText().toString());");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("\t\t\t");
                          _builder.append("helper.writeCharacteristicFloat(gattCharacteristic");
                          String _name_29 = characteristic_5.getName();
                          _builder.append(_name_29, "        \t\t\t");
                          _builder.append(", value);");
                          _builder.newLineIfNotEmpty();
                        } else {
                          boolean _equals_10 = characteristic_5.getDataType().equals(DataType.INTEGER);
                          if (_equals_10) {
                            _builder.append("        ");
                            _builder.append("\t\t\t");
                            _builder.append("int value = Integer.valueOf(editText");
                            String _name_30 = characteristic_5.getUielement().getName();
                            _builder.append(_name_30, "        \t\t\t");
                            _builder.append("WriteValue.getText().toString());");
                            _builder.newLineIfNotEmpty();
                            _builder.append("        ");
                            _builder.append("\t\t\t");
                            _builder.append("helper.writeCharacteristicInt(gattCharacteristic");
                            String _name_31 = characteristic_5.getName();
                            _builder.append(_name_31, "        \t\t\t");
                            _builder.append(", value);");
                            _builder.newLineIfNotEmpty();
                          } else {
                            boolean _equals_11 = characteristic_5.getDataType().equals(DataType.STRING);
                            if (_equals_11) {
                              _builder.append("        ");
                              _builder.append("\t\t\t");
                              _builder.append("String value = editText");
                              String _name_32 = characteristic_5.getUielement().getName();
                              _builder.append(_name_32, "        \t\t\t");
                              _builder.append("WriteValue.getText().toString();");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("\t\t\t");
                              _builder.append("helper.writeCharacteristicString(gattCharacteristic");
                              String _name_33 = characteristic_5.getName();
                              _builder.append(_name_33, "        \t\t\t");
                              _builder.append(", value);");
                              _builder.newLineIfNotEmpty();
                            } else {
                              boolean _equals_12 = characteristic_5.getDataType().equals(DataType.BYTE);
                              if (_equals_12) {
                                _builder.append("        ");
                                _builder.append("\t\t\t");
                                _builder.append("int value = Integer.valueOf(editText");
                                String _name_34 = characteristic_5.getUielement().getName();
                                _builder.append(_name_34, "        \t\t\t");
                                _builder.append("WriteValue.getText().toString());");
                                _builder.newLineIfNotEmpty();
                                _builder.append("        ");
                                _builder.append("\t\t\t");
                                _builder.append("helper.writeCharacteristicByte(gattCharacteristic");
                                String _name_35 = characteristic_5.getName();
                                _builder.append(_name_35, "        \t\t\t");
                                _builder.append(", (byte) value);");
                                _builder.newLineIfNotEmpty();
                              } else {
                                boolean _equals_13 = characteristic_5.getDataType().equals(DataType.BYTES);
                                if (_equals_13) {
                                  _builder.append("        ");
                                  _builder.append("\t\t\t");
                                  _builder.append("String value = editText");
                                  String _name_36 = characteristic_5.getUielement().getName();
                                  _builder.append(_name_36, "        \t\t\t");
                                  _builder.append("WriteValue.getText().toString();");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("\t\t\t");
                                  _builder.append("helper.writeCharacteristicBytes(gattCharacteristic");
                                  String _name_37 = characteristic_5.getName();
                                  _builder.append(_name_37, "        \t\t\t");
                                  _builder.append(", value.getBytes());");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("        ");
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("});");
                    _builder.newLine();
                  } else {
                  }
                }
                {
                  boolean _equals_14 = Boolean.valueOf(characteristic_5.isNotification()).equals(Boolean.valueOf(true));
                  if (_equals_14) {
                    _builder.append("        ");
                    _builder.append("textView");
                    String _name_38 = characteristic_5.getUielement().getName();
                    _builder.append(_name_38, "        ");
                    _builder.append("NotifyValue = findViewById(R.id.textView");
                    String _name_39 = characteristic_5.getUielement().getName();
                    _builder.append(_name_39, "        ");
                    _builder.append("NotifyValue);");
                    _builder.newLineIfNotEmpty();
                  } else {
                  }
                }
              } else {
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getActionBar().setTitle(mDeviceName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getActionBar().setDisplayHomeAsUpEnabled(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Intent gattServiceIntent = new Intent(this, BluetoothLeService.class);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bindService(gattServiceIntent, mServiceConnection, BIND_AUTO_CREATE);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onResume() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onResume();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("registerReceiver(mGattUpdateReceiver, makeGattUpdateIntentFilter());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mBluetoothLeService != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("final boolean result = mBluetoothLeService.connect(mDeviceAddress);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Log.d(TAG, \"Connect request result=\" + result);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onPause() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onPause();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unregisterReceiver(mGattUpdateReceiver);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void onDestroy() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super.onDestroy();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("unbindService(mServiceConnection);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("mBluetoothLeService = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onCreateOptionsMenu(Menu menu) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getMenuInflater().inflate(R.menu.gatt_services, menu);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (mConnected) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_connect).setVisible(false);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_disconnect).setVisible(true);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_connect).setVisible(true);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("menu.findItem(R.id.menu_disconnect).setVisible(false);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean onOptionsItemSelected(MenuItem item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch(item.getItemId()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case R.id.menu_connect:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mBluetoothLeService.connect(mDeviceAddress);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case R.id.menu_disconnect:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mBluetoothLeService.disconnect();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("case android.R.id.home:");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("onBackPressed();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.onOptionsItemSelected(item);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void updateConnectionState(final int resourceId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("runOnUiThread(new Runnable() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mConnectionState.setText(resourceId);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void displayData(final String t1) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("runOnUiThread(new Runnable() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("if(t1 != null) {");
    _builder.newLine();
    {
      EList<Service> _service_6 = sensor.getService();
      for(final Service service_6 : _service_6) {
        {
          EList<Characteristic> _characteristic_6 = service_6.getCharacteristic();
          for(final Characteristic characteristic_6 : _characteristic_6) {
            {
              UiElement _uielement_3 = characteristic_6.getUielement();
              boolean _tripleNotEquals_6 = (_uielement_3 != null);
              if (_tripleNotEquals_6) {
                {
                  boolean _equals_15 = Boolean.valueOf(characteristic_6.isRead()).equals(Boolean.valueOf(true));
                  if (_equals_15) {
                    _builder.append("            \t\t");
                    _builder.append("if(t1.equals(\"");
                    String _name_40 = characteristic_6.getName();
                    _builder.append(_name_40, "            \t\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                    {
                      String _unit = characteristic_6.getUnit();
                      boolean _tripleNotEquals_7 = (_unit != null);
                      if (_tripleNotEquals_7) {
                        _builder.append("            \t\t");
                        _builder.append("\t");
                        _builder.append("textView");
                        String _name_41 = characteristic_6.getUielement().getName();
                        _builder.append(_name_41, "            \t\t\t");
                        _builder.append("ReadValue.setText(helper.get(\"");
                        String _name_42 = characteristic_6.getName();
                        _builder.append(_name_42, "            \t\t\t");
                        _builder.append("\") + \"");
                        String _unit_1 = characteristic_6.getUnit();
                        _builder.append(_unit_1, "            \t\t\t");
                        _builder.append("\");");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("            \t\t");
                        _builder.append("\t");
                        _builder.append("textView");
                        String _name_43 = characteristic_6.getUielement().getName();
                        _builder.append(_name_43, "            \t\t\t");
                        _builder.append("ReadValue.setText(helper.get(\"");
                        String _name_44 = characteristic_6.getName();
                        _builder.append(_name_44, "            \t\t\t");
                        _builder.append("\"));");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("            \t\t");
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                  }
                }
                {
                  boolean _equals_16 = Boolean.valueOf(characteristic_6.isNotification()).equals(Boolean.valueOf(true));
                  if (_equals_16) {
                    _builder.append("            \t\t");
                    _builder.append("if(t1.equals(\"");
                    String _name_45 = characteristic_6.getName();
                    _builder.append(_name_45, "            \t\t");
                    _builder.append("\")) {");
                    _builder.newLineIfNotEmpty();
                    {
                      String _unit_2 = characteristic_6.getUnit();
                      boolean _tripleNotEquals_8 = (_unit_2 != null);
                      if (_tripleNotEquals_8) {
                        _builder.append("            \t\t");
                        _builder.append("\t");
                        _builder.append("textView");
                        String _name_46 = characteristic_6.getUielement().getName();
                        _builder.append(_name_46, "            \t\t\t");
                        _builder.append("NotifyValue.setText(helper.get(\"");
                        String _name_47 = characteristic_6.getName();
                        _builder.append(_name_47, "            \t\t\t");
                        _builder.append("\") + \"");
                        String _unit_3 = characteristic_6.getUnit();
                        _builder.append(_unit_3, "            \t\t\t");
                        _builder.append("\");");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("            \t\t");
                        _builder.append("\t");
                        _builder.append("textView");
                        String _name_48 = characteristic_6.getUielement().getName();
                        _builder.append(_name_48, "            \t\t\t");
                        _builder.append("NotifyValue.setText(helper.get(\"");
                        String _name_49 = characteristic_6.getName();
                        _builder.append(_name_49, "            \t\t\t");
                        _builder.append("\"));");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("            \t\t");
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                  }
                }
              } else {
              }
            }
          }
        }
      }
    }
    _builder.append("            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static IntentFilter makeGattUpdateIntentFilter() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("final IntentFilter intentFilter = new IntentFilter();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intentFilter.addAction(BluetoothLeService.ACTION_GATT_CONNECTED);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intentFilter.addAction(BluetoothLeService.ACTION_GATT_DISCONNECTED);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intentFilter.addAction(BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("intentFilter.addAction(BluetoothLeService.ACTION_DATA_AVAILABLE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return intentFilter;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'DataStruct.java' file. This file is a type of helper class to store and manage data received from the BLE device.
   */
  public CharSequence generateDataStruct(final Sensor sensor, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class DataStruct {");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            {
              boolean _equals = characteristic.getDataType().equals(DataType.BYTES);
              if (_equals) {
                _builder.append("\t");
                _builder.append("private bytes[] ");
                String _name = characteristic.getName();
                _builder.append(_name, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equals_1 = characteristic.getDataType().equals(DataType.BYTE);
                if (_equals_1) {
                  _builder.append("\t");
                  _builder.append("private byte ");
                  String _name_1 = characteristic.getName();
                  _builder.append(_name_1, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _equals_2 = characteristic.getDataType().equals(DataType.DOUBLE);
                  if (_equals_2) {
                    _builder.append("\t");
                    _builder.append("private double ");
                    String _name_2 = characteristic.getName();
                    _builder.append(_name_2, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equals_3 = characteristic.getDataType().equals(DataType.FLOAT);
                    if (_equals_3) {
                      _builder.append("\t");
                      _builder.append("private float ");
                      String _name_3 = characteristic.getName();
                      _builder.append(_name_3, "\t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                    } else {
                      boolean _equals_4 = characteristic.getDataType().equals(DataType.INTEGER);
                      if (_equals_4) {
                        _builder.append("\t");
                        _builder.append("private int ");
                        String _name_4 = characteristic.getName();
                        _builder.append(_name_4, "\t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equals_5 = characteristic.getDataType().equals(DataType.STRING);
                        if (_equals_5) {
                          _builder.append("\t");
                          _builder.append("private String ");
                          String _name_5 = characteristic.getName();
                          _builder.append(_name_5, "\t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public DataStruct(){");
    _builder.newLine();
    {
      EList<Service> _service_1 = sensor.getService();
      for(final Service service_1 : _service_1) {
        {
          EList<Characteristic> _characteristic_1 = service_1.getCharacteristic();
          for(final Characteristic characteristic_1 : _characteristic_1) {
            {
              DataType _dataType = characteristic_1.getDataType();
              boolean _tripleNotEquals = (_dataType != DataType.STRING);
              if (_tripleNotEquals) {
                _builder.append("        ");
                String _name_6 = characteristic_1.getName();
                _builder.append(_name_6, "        ");
                _builder.append(" = 0;");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("        ");
                String _name_7 = characteristic_1.getName();
                _builder.append(_name_7, "        ");
                _builder.append(" = \"\";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    {
      EList<Service> _service_2 = sensor.getService();
      for(final Service service_2 : _service_2) {
        {
          EList<Characteristic> _characteristic_2 = service_2.getCharacteristic();
          for(final Characteristic characteristic_2 : _characteristic_2) {
            {
              boolean _equals_6 = characteristic_2.getDataType().equals(DataType.BYTES);
              if (_equals_6) {
                _builder.append("    ");
                _builder.append("public void set");
                String _name_8 = characteristic_2.getName();
                _builder.append(_name_8, "    ");
                _builder.append("(byte[] data) {");
                _builder.newLineIfNotEmpty();
                _builder.append("    ");
                _builder.append("\t");
                String _name_9 = characteristic_2.getName();
                _builder.append(_name_9, "    \t");
                _builder.append(" = data;");
                _builder.newLineIfNotEmpty();
                _builder.append("    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("    ");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("public byte[] get");
                String _name_10 = characteristic_2.getName();
                _builder.append(_name_10, "    ");
                _builder.append("() {");
                _builder.newLineIfNotEmpty();
                _builder.append("    ");
                _builder.append("\t");
                _builder.append("return ");
                String _name_11 = characteristic_2.getName();
                _builder.append(_name_11, "    \t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("    ");
                _builder.append("}");
                _builder.newLine();
                _builder.append("    ");
                _builder.newLine();
              } else {
                boolean _equals_7 = characteristic_2.getDataType().equals(DataType.BYTE);
                if (_equals_7) {
                  _builder.append("    ");
                  _builder.append("public void set");
                  String _name_12 = characteristic_2.getName();
                  _builder.append(_name_12, "    ");
                  _builder.append("(byte[] data) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("\t");
                  _builder.append("// TODO: Add code to receive data and convert if necessary");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("\t");
                  String _name_13 = characteristic_2.getName();
                  _builder.append(_name_13, "    \t");
                  _builder.append(" = data[0];");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.append("public byte get");
                  String _name_14 = characteristic_2.getName();
                  _builder.append(_name_14, "    ");
                  _builder.append("() {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("\t");
                  _builder.append("return ");
                  String _name_15 = characteristic_2.getName();
                  _builder.append(_name_15, "    \t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                  _builder.append("    ");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("    ");
                  _builder.newLine();
                } else {
                  boolean _equals_8 = characteristic_2.getDataType().equals(DataType.DOUBLE);
                  if (_equals_8) {
                    _builder.append("    ");
                    _builder.append("public void set");
                    String _name_16 = characteristic_2.getName();
                    _builder.append(_name_16, "    ");
                    _builder.append("(byte[] data) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.append("\t");
                    _builder.append("// TODO: Add code to receive data and convert if necessary");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("\t");
                    String _name_17 = characteristic_2.getName();
                    _builder.append(_name_17, "    \t");
                    _builder.append(" = data[0];");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("public double get");
                    String _name_18 = characteristic_2.getName();
                    _builder.append(_name_18, "    ");
                    _builder.append("() {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.append("\t");
                    _builder.append("return ");
                    String _name_19 = characteristic_2.getName();
                    _builder.append(_name_19, "    \t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    ");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.newLine();
                  } else {
                    boolean _equals_9 = characteristic_2.getDataType().equals(DataType.FLOAT);
                    if (_equals_9) {
                      _builder.append("    ");
                      _builder.append("public void set");
                      String _name_20 = characteristic_2.getName();
                      _builder.append(_name_20, "    ");
                      _builder.append("(byte[] data) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("\t");
                      _builder.append("// TODO: Add code to receive data and convert if necessary");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("\t");
                      String _name_21 = characteristic_2.getName();
                      _builder.append(_name_21, "    \t");
                      _builder.append(" = data[0];");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.append("public float get");
                      String _name_22 = characteristic_2.getName();
                      _builder.append(_name_22, "    ");
                      _builder.append("() {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("\t");
                      _builder.append("return ");
                      String _name_23 = characteristic_2.getName();
                      _builder.append(_name_23, "    \t");
                      _builder.append(";");
                      _builder.newLineIfNotEmpty();
                      _builder.append("    ");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("    ");
                      _builder.newLine();
                    } else {
                      boolean _equals_10 = characteristic_2.getDataType().equals(DataType.INTEGER);
                      if (_equals_10) {
                        _builder.append("    ");
                        _builder.append("public void set");
                        String _name_24 = characteristic_2.getName();
                        _builder.append(_name_24, "    ");
                        _builder.append("(byte[] data) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.append("\t");
                        _builder.append("// TODO: Add code to receive data and convert if necessary");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("\t");
                        String _name_25 = characteristic_2.getName();
                        _builder.append(_name_25, "    \t");
                        _builder.append(" = data[0];");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.append("public int get");
                        String _name_26 = characteristic_2.getName();
                        _builder.append(_name_26, "    ");
                        _builder.append("() {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.append("\t");
                        _builder.append("return ");
                        String _name_27 = characteristic_2.getName();
                        _builder.append(_name_27, "    \t");
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("    ");
                        _builder.append("}");
                        _builder.newLine();
                        _builder.append("    ");
                        _builder.newLine();
                      } else {
                        boolean _equals_11 = characteristic_2.getDataType().equals(DataType.STRING);
                        if (_equals_11) {
                          _builder.append("    ");
                          _builder.append("public void set");
                          String _name_28 = characteristic_2.getName();
                          _builder.append(_name_28, "    ");
                          _builder.append("(byte[] data) {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("\t");
                          _builder.append("// TODO: Add code to receive data and convert if necessary");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("\t");
                          String _name_29 = characteristic_2.getName();
                          _builder.append(_name_29, "    \t");
                          _builder.append(" = String.valueOf(data[0]);");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("public String get");
                          String _name_30 = characteristic_2.getName();
                          _builder.append(_name_30, "    ");
                          _builder.append("() {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("\t");
                          _builder.append("return ");
                          String _name_31 = characteristic_2.getName();
                          _builder.append(_name_31, "    \t");
                          _builder.append(";");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Generate-method for the 'Helper.java' file. This file is a helper class to ease the communication between the application and the BLE device.
   */
  public CharSequence generateHelper(final Sensor sensor, final String packageName, final String appNamePath) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(".");
    _builder.append(appNamePath);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import android.bluetooth.BluetoothGattCharacteristic;");
    _builder.newLine();
    _builder.append("import java.nio.ByteBuffer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Helper {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("BluetoothLeService bluetoothLeService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Helper(BluetoothLeService service) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService = service;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void readCharacteristic(BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService.readCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicInt(BluetoothGattCharacteristic characteristic, int value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("byte[] bytes = intToByteArray(value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean result = characteristic.setValue(bytes);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicFloat(BluetoothGattCharacteristic characteristic, float value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("byte[] bytes = floatToByteArray(value);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean result = characteristic.setValue(bytes);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicDouble(BluetoothGattCharacteristic characteristic, double value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("byte[] bytes = doubleToByteArray(value);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("boolean result = characteristic.setValue(bytes);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicString(BluetoothGattCharacteristic characteristic, String value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("byte[] bytes = value.getBytes();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("boolean result = characteristic.setValue(bytes);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicByte(BluetoothGattCharacteristic characteristic, byte value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean result = characteristic.setValue(new byte[]{value});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean writeCharacteristicBytes(BluetoothGattCharacteristic characteristic, byte[] value) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// TODO: Add your own conversion methods or adjust existing conversion methods");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("boolean result = characteristic.setValue(value);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("bluetoothLeService.writeCharacteristic(characteristic);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("bluetoothLeService.setCharacteristicNotification(characteristic, true);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String get(String identifier) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("switch (identifier) {");
    _builder.newLine();
    {
      EList<Service> _service = sensor.getService();
      for(final Service service : _service) {
        {
          EList<Characteristic> _characteristic = service.getCharacteristic();
          for(final Characteristic characteristic : _characteristic) {
            _builder.append("    \t\t");
            _builder.append("case \"");
            String _name = characteristic.getName();
            _builder.append(_name, "    \t\t");
            _builder.append("\": return String.valueOf(bluetoothLeService.getDataStruct().get");
            String _name_1 = characteristic.getName();
            _builder.append(_name_1, "    \t\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("            ");
    _builder.append("default: return \"n/a\";");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private byte[] intToByteArray(int value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ByteBuffer.allocate(4).putInt(value).array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private byte[] floatToByteArray(float value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ByteBuffer.allocate(4).putFloat(value).array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private byte[] doubleToByteArray(double value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ByteBuffer.allocate(4).putDouble(value).array();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}

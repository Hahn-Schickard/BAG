/*
 * generated by Xtext 2.22.0
 */
package bag.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPackageNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPackageNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackageNameEStringParserRuleCall_4_0 = (RuleCall)cPackageNameAssignment_4.eContents().get(0);
		private final Assignment cSensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSensorSensorParserRuleCall_5_0 = (RuleCall)cSensorAssignment_5.eContents().get(0);
		private final Assignment cMacfilterAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMacfilterMacFilterParserRuleCall_6_0 = (RuleCall)cMacfilterAssignment_6.eContents().get(0);
		private final Assignment cNamefilterAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNamefilterNameFilterParserRuleCall_7_0 = (RuleCall)cNamefilterAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Structure of the main element 'App'
		//App:
		//	'App'
		//	name=EString
		//	'{'
		//	'packageName' packageName=EString
		//	sensor=Sensor
		//	macfilter=MacFilter?
		//	namefilter=NameFilter?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'App' name=EString '{' 'packageName' packageName=EString sensor=Sensor macfilter=MacFilter? namefilter=NameFilter? '}'
		public Group getGroup() { return cGroup; }
		
		//'App'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'packageName'
		public Keyword getPackageNameKeyword_3() { return cPackageNameKeyword_3; }
		
		//packageName=EString
		public Assignment getPackageNameAssignment_4() { return cPackageNameAssignment_4; }
		
		//EString
		public RuleCall getPackageNameEStringParserRuleCall_4_0() { return cPackageNameEStringParserRuleCall_4_0; }
		
		//sensor=Sensor
		public Assignment getSensorAssignment_5() { return cSensorAssignment_5; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_5_0() { return cSensorSensorParserRuleCall_5_0; }
		
		//macfilter=MacFilter?
		public Assignment getMacfilterAssignment_6() { return cMacfilterAssignment_6; }
		
		//MacFilter
		public RuleCall getMacfilterMacFilterParserRuleCall_6_0() { return cMacfilterMacFilterParserRuleCall_6_0; }
		
		//namefilter=NameFilter?
		public Assignment getNamefilterAssignment_7() { return cNamefilterAssignment_7; }
		
		//NameFilter
		public RuleCall getNamefilterNameFilterParserRuleCall_7_0() { return cNamefilterNameFilterParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Definition of the string attributes
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServiceServiceParserRuleCall_3_0 = (RuleCall)cServiceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cServiceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cServiceServiceParserRuleCall_4_1_0 = (RuleCall)cServiceAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Structure of the 'Sensor' element
		//Sensor:
		//	'Sensor'
		//	name=EString
		//	'{'
		//	service+=Service ("," service+=Service)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=EString '{' service+=Service ("," service+=Service)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//service+=Service
		public Assignment getServiceAssignment_3() { return cServiceAssignment_3; }
		
		//Service
		public RuleCall getServiceServiceParserRuleCall_3_0() { return cServiceServiceParserRuleCall_3_0; }
		
		//("," service+=Service)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//service+=Service
		public Assignment getServiceAssignment_4_1() { return cServiceAssignment_4_1; }
		
		//Service
		public RuleCall getServiceServiceParserRuleCall_4_1_0() { return cServiceServiceParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MacFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.MacFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMacaddressAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMacaddressMacAddressParserRuleCall_2_0 = (RuleCall)cMacaddressAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMacaddressAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMacaddressMacAddressParserRuleCall_3_1_0 = (RuleCall)cMacaddressAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Structure of the 'MacFilter' element
		//MacFilter:
		//	'MacFilter'
		//	'{'
		//	macaddress+=MacAddress ("," macaddress+=MacAddress)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MacFilter' '{' macaddress+=MacAddress ("," macaddress+=MacAddress)* '}'
		public Group getGroup() { return cGroup; }
		
		//'MacFilter'
		public Keyword getMacFilterKeyword_0() { return cMacFilterKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//macaddress+=MacAddress
		public Assignment getMacaddressAssignment_2() { return cMacaddressAssignment_2; }
		
		//MacAddress
		public RuleCall getMacaddressMacAddressParserRuleCall_2_0() { return cMacaddressMacAddressParserRuleCall_2_0; }
		
		//("," macaddress+=MacAddress)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//macaddress+=MacAddress
		public Assignment getMacaddressAssignment_3_1() { return cMacaddressAssignment_3_1; }
		
		//MacAddress
		public RuleCall getMacaddressMacAddressParserRuleCall_3_1_0() { return cMacaddressMacAddressParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NameFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.NameFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameExpressionParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Structure of the 'NameFilter' element	
		//NameFilter:
		//	'NameFilter' name=NameExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'NameFilter' name=NameExpression
		public Group getGroup() { return cGroup; }
		
		//'NameFilter'
		public Keyword getNameFilterKeyword_0() { return cNameFilterKeyword_0; }
		
		//name=NameExpression
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NameExpression
		public RuleCall getNameNameExpressionParserRuleCall_1_0() { return cNameNameExpressionParserRuleCall_1_0; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUuidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUuidEStringParserRuleCall_4_0 = (RuleCall)cUuidAssignment_4.eContents().get(0);
		private final Assignment cCharacteristicAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCharacteristicCharacteristicParserRuleCall_5_0 = (RuleCall)cCharacteristicAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCharacteristicAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCharacteristicCharacteristicParserRuleCall_6_1_0 = (RuleCall)cCharacteristicAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Structure of the 'Service' element	
		//Service:
		//	'Service'
		//	name=EString
		//	'{'
		//	'uuid' uuid=EString
		//	characteristic+=Characteristic ("," characteristic+=Characteristic)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Service' name=EString '{' 'uuid' uuid=EString characteristic+=Characteristic ("," characteristic+=Characteristic)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'uuid'
		public Keyword getUuidKeyword_3() { return cUuidKeyword_3; }
		
		//uuid=EString
		public Assignment getUuidAssignment_4() { return cUuidAssignment_4; }
		
		//EString
		public RuleCall getUuidEStringParserRuleCall_4_0() { return cUuidEStringParserRuleCall_4_0; }
		
		//characteristic+=Characteristic
		public Assignment getCharacteristicAssignment_5() { return cCharacteristicAssignment_5; }
		
		//Characteristic
		public RuleCall getCharacteristicCharacteristicParserRuleCall_5_0() { return cCharacteristicCharacteristicParserRuleCall_5_0; }
		
		//("," characteristic+=Characteristic)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//characteristic+=Characteristic
		public Assignment getCharacteristicAssignment_6_1() { return cCharacteristicAssignment_6_1; }
		
		//Characteristic
		public RuleCall getCharacteristicCharacteristicParserRuleCall_6_1_0() { return cCharacteristicCharacteristicParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacteristicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUuidKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUuidAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUuidEStringParserRuleCall_4_0 = (RuleCall)cUuidAssignment_4.eContents().get(0);
		private final Keyword cDataTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_6_0 = (RuleCall)cDataTypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUnitKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUnitAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_7_1_0 = (RuleCall)cUnitAssignment_7_1.eContents().get(0);
		private final Keyword cReadKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cReadAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cReadEBooleanParserRuleCall_9_0 = (RuleCall)cReadAssignment_9.eContents().get(0);
		private final Keyword cWriteKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cWriteAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cWriteEBooleanParserRuleCall_11_0 = (RuleCall)cWriteAssignment_11.eContents().get(0);
		private final Keyword cNotificationKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cNotificationAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cNotificationEBooleanParserRuleCall_13_0 = (RuleCall)cNotificationAssignment_13.eContents().get(0);
		private final Assignment cUielementAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cUielementUIElementParserRuleCall_14_0 = (RuleCall)cUielementAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//// Structure of the 'Characteristic' element
		//Characteristic:
		//	'Characteristic'
		//	name=EString
		//	'{'
		//	'uuid' uuid=EString
		//	'dataType' dataType=DataType ('unit' unit=EString)?
		//	'read' read=EBoolean
		//	'write' write=EBoolean
		//	'notification' notification=EBoolean
		//	uielement=UIElement?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Characteristic' name=EString '{' 'uuid' uuid=EString 'dataType' dataType=DataType ('unit' unit=EString)? 'read'
		//read=EBoolean 'write' write=EBoolean 'notification' notification=EBoolean uielement=UIElement? '}'
		public Group getGroup() { return cGroup; }
		
		//'Characteristic'
		public Keyword getCharacteristicKeyword_0() { return cCharacteristicKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'uuid'
		public Keyword getUuidKeyword_3() { return cUuidKeyword_3; }
		
		//uuid=EString
		public Assignment getUuidAssignment_4() { return cUuidAssignment_4; }
		
		//EString
		public RuleCall getUuidEStringParserRuleCall_4_0() { return cUuidEStringParserRuleCall_4_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_5() { return cDataTypeKeyword_5; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_6() { return cDataTypeAssignment_6; }
		
		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_6_0() { return cDataTypeDataTypeEnumRuleCall_6_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'unit'
		public Keyword getUnitKeyword_7_0() { return cUnitKeyword_7_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_7_1() { return cUnitAssignment_7_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_7_1_0() { return cUnitEStringParserRuleCall_7_1_0; }
		
		//'read'
		public Keyword getReadKeyword_8() { return cReadKeyword_8; }
		
		//read=EBoolean
		public Assignment getReadAssignment_9() { return cReadAssignment_9; }
		
		//EBoolean
		public RuleCall getReadEBooleanParserRuleCall_9_0() { return cReadEBooleanParserRuleCall_9_0; }
		
		//'write'
		public Keyword getWriteKeyword_10() { return cWriteKeyword_10; }
		
		//write=EBoolean
		public Assignment getWriteAssignment_11() { return cWriteAssignment_11; }
		
		//EBoolean
		public RuleCall getWriteEBooleanParserRuleCall_11_0() { return cWriteEBooleanParserRuleCall_11_0; }
		
		//'notification'
		public Keyword getNotificationKeyword_12() { return cNotificationKeyword_12; }
		
		//notification=EBoolean
		public Assignment getNotificationAssignment_13() { return cNotificationAssignment_13; }
		
		//EBoolean
		public RuleCall getNotificationEBooleanParserRuleCall_13_0() { return cNotificationEBooleanParserRuleCall_13_0; }
		
		//uielement=UIElement?
		public Assignment getUielementAssignment_14() { return cUielementAssignment_14; }
		
		//UIElement
		public RuleCall getUielementUIElementParserRuleCall_14_0() { return cUielementUIElementParserRuleCall_14_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class UIElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.UIElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUiElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelEStringParserRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Structure of the 'UiElement' element
		//UIElement UiElement:
		//	'UiElement'
		//	name=EString
		//	'{'
		//	'label' label=EString ('description' description=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'UiElement' name=EString '{' 'label' label=EString ('description' description=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//'UiElement'
		public Keyword getUiElementKeyword_0() { return cUiElementKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'label'
		public Keyword getLabelKeyword_3() { return cLabelKeyword_3; }
		
		//label=EString
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_4_0() { return cLabelEStringParserRuleCall_4_0; }
		
		//('description' description=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'description'
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }
		
		//description=EString
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_5_1_0() { return cDescriptionEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Definition of the boolean attributes
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class MacAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.MacAddress");
		private final Assignment cAddressAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAddressEStringParserRuleCall_0 = (RuleCall)cAddressAssignment.eContents().get(0);
		
		//// Structure of the 'MacAddress' attribute
		//MacAddress:
		//	address=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//address=EString
		public Assignment getAddressAssignment() { return cAddressAssignment; }
		
		//EString
		public RuleCall getAddressEStringParserRuleCall_0() { return cAddressEStringParserRuleCall_0; }
	}
	public class NameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.NameExpression");
		private final Assignment cRegExAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRegExEStringParserRuleCall_0 = (RuleCall)cRegExAssignment.eContents().get(0);
		
		//// Structure of the 'NameExpression' attribute
		//NameExpression:
		//	regEx=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//regEx=EString
		public Assignment getRegExAssignment() { return cRegExAssignment; }
		
		//EString
		public RuleCall getRegExEStringParserRuleCall_0() { return cRegExEStringParserRuleCall_0; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "bag.DSL.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFloatFloatKeyword_0_0 = (Keyword)cFloatEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDoubleDoubleKeyword_1_0 = (Keyword)cDoubleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStringStringKeyword_3_0 = (Keyword)cStringEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBytesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBytesBytesKeyword_4_0 = (Keyword)cBytesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cByteEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cByteByteKeyword_5_0 = (Keyword)cByteEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum DataType:
		//	Float | Double | Integer | String | Bytes | Byte;
		public EnumRule getRule() { return rule; }
		
		//Float | Double | Integer | String | Bytes | Byte
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_0() { return cFloatEnumLiteralDeclaration_0; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_0_0() { return cFloatFloatKeyword_0_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_1() { return cDoubleEnumLiteralDeclaration_1; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_1_0() { return cDoubleDoubleKeyword_1_0; }
		
		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }
		
		//'Integer'
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_3() { return cStringEnumLiteralDeclaration_3; }
		
		//'String'
		public Keyword getStringStringKeyword_3_0() { return cStringStringKeyword_3_0; }
		
		//Bytes
		public EnumLiteralDeclaration getBytesEnumLiteralDeclaration_4() { return cBytesEnumLiteralDeclaration_4; }
		
		//'Bytes'
		public Keyword getBytesBytesKeyword_4_0() { return cBytesBytesKeyword_4_0; }
		
		//Byte
		public EnumLiteralDeclaration getByteEnumLiteralDeclaration_5() { return cByteEnumLiteralDeclaration_5; }
		
		//'Byte'
		public Keyword getByteByteKeyword_5_0() { return cByteByteKeyword_5_0; }
	}
	
	private final AppElements pApp;
	private final EStringElements pEString;
	private final SensorElements pSensor;
	private final MacFilterElements pMacFilter;
	private final NameFilterElements pNameFilter;
	private final ServiceElements pService;
	private final CharacteristicElements pCharacteristic;
	private final UIElementElements pUIElement;
	private final DataTypeElements eDataType;
	private final EBooleanElements pEBoolean;
	private final MacAddressElements pMacAddress;
	private final NameExpressionElements pNameExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pEString = new EStringElements();
		this.pSensor = new SensorElements();
		this.pMacFilter = new MacFilterElements();
		this.pNameFilter = new NameFilterElements();
		this.pService = new ServiceElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pUIElement = new UIElementElements();
		this.eDataType = new DataTypeElements();
		this.pEBoolean = new EBooleanElements();
		this.pMacAddress = new MacAddressElements();
		this.pNameExpression = new NameExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("bag.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Structure of the main element 'App'
	//App:
	//	'App'
	//	name=EString
	//	'{'
	//	'packageName' packageName=EString
	//	sensor=Sensor
	//	macfilter=MacFilter?
	//	namefilter=NameFilter?
	//	'}';
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//// Definition of the string attributes
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// Structure of the 'Sensor' element
	//Sensor:
	//	'Sensor'
	//	name=EString
	//	'{'
	//	service+=Service ("," service+=Service)*
	//	'}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//// Structure of the 'MacFilter' element
	//MacFilter:
	//	'MacFilter'
	//	'{'
	//	macaddress+=MacAddress ("," macaddress+=MacAddress)*
	//	'}';
	public MacFilterElements getMacFilterAccess() {
		return pMacFilter;
	}
	
	public ParserRule getMacFilterRule() {
		return getMacFilterAccess().getRule();
	}
	
	//// Structure of the 'NameFilter' element	
	//NameFilter:
	//	'NameFilter' name=NameExpression;
	public NameFilterElements getNameFilterAccess() {
		return pNameFilter;
	}
	
	public ParserRule getNameFilterRule() {
		return getNameFilterAccess().getRule();
	}
	
	//// Structure of the 'Service' element	
	//Service:
	//	'Service'
	//	name=EString
	//	'{'
	//	'uuid' uuid=EString
	//	characteristic+=Characteristic ("," characteristic+=Characteristic)*
	//	'}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//// Structure of the 'Characteristic' element
	//Characteristic:
	//	'Characteristic'
	//	name=EString
	//	'{'
	//	'uuid' uuid=EString
	//	'dataType' dataType=DataType ('unit' unit=EString)?
	//	'read' read=EBoolean
	//	'write' write=EBoolean
	//	'notification' notification=EBoolean
	//	uielement=UIElement?
	//	'}';
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//// Structure of the 'UiElement' element
	//UIElement UiElement:
	//	'UiElement'
	//	name=EString
	//	'{'
	//	'label' label=EString ('description' description=EString)?
	//	'}';
	public UIElementElements getUIElementAccess() {
		return pUIElement;
	}
	
	public ParserRule getUIElementRule() {
		return getUIElementAccess().getRule();
	}
	
	//enum DataType:
	//	Float | Double | Integer | String | Bytes | Byte;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//// Definition of the boolean attributes
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//// Structure of the 'MacAddress' attribute
	//MacAddress:
	//	address=EString;
	public MacAddressElements getMacAddressAccess() {
		return pMacAddress;
	}
	
	public ParserRule getMacAddressRule() {
		return getMacAddressAccess().getRule();
	}
	
	//// Structure of the 'NameExpression' attribute
	//NameExpression:
	//	regEx=EString;
	public NameExpressionElements getNameExpressionAccess() {
		return pNameExpression;
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

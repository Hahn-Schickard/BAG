grammar bag.DSL with org.eclipse.xtext.common.Terminals

import "http://www.bag.org/bagEcore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Structure of the main element 'App'
App returns App:
	'App'
	name=EString
	'{'
		'packageName' packageName=EString
		sensor=Sensor
		(macfilter=MacFilter)?
		(namefilter=NameFilter)?
	'}';

// Definition of the string attributes
EString returns ecore::EString:
	STRING | ID;

// Structure of the 'Sensor' element
Sensor returns Sensor:
	'Sensor'
	name=EString
	'{'
		service+=Service ( "," service+=Service)* 
	'}';

// Structure of the 'MacFilter' element
MacFilter returns MacFilter:
	'MacFilter'
	'{'
		macaddress+=MacAddress ( "," macaddress+=MacAddress)* 
	'}';
	
// Structure of the 'NameFilter' element	
NameFilter returns NameFilter:
	'NameFilter' name=NameExpression;
	
// Structure of the 'Service' element	
Service returns Service:
	'Service'
	name=EString
	'{'
		'uuid' uuid=EString
		characteristic+=Characteristic ( "," characteristic+=Characteristic)*
	'}';

// Structure of the 'Characteristic' element
Characteristic returns Characteristic:
	'Characteristic'
	name=EString
	'{'
		'uuid' uuid=EString
		'dataType' dataType=DataType
		('unit' unit=EString)?
		'read' read=EBoolean
		'write' write=EBoolean
		'notification' notification=EBoolean
		(uielement=UIElement)?
	'}';

// Structure of the 'UiElement' element
UIElement returns UiElement:
	'UiElement'
	name=EString
	'{'
		'label' label=EString
		('description' description=EString)?
	'}'
;

// Defined enumeration for possible data types
enum DataType returns DataType:
				Float = 'Float' | Double = 'Double' | Integer = 'Integer' | String = 'String' | Bytes = 'Bytes' | Byte = 'Byte';

// Definition of the boolean attributes
EBoolean returns ecore::EBoolean:
	'true' | 'false';

// Structure of the 'MacAddress' attribute
MacAddress returns MacAddress:
	address=EString;

// Structure of the 'NameExpression' attribute
NameExpression returns NameExpression:
	regEx=EString;

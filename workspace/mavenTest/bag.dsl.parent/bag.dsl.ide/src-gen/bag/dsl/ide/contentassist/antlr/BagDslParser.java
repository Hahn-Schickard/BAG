/*
 * generated by Xtext 2.22.0
 */
package bag.dsl.ide.contentassist.antlr;

import bag.dsl.ide.contentassist.antlr.internal.InternalBagDslParser;
import bag.dsl.services.BagDslGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BagDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BagDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BagDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getAppAccess().getGroup(), "rule__App__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_4(), "rule__Sensor__Group_4__0");
			builder.put(grammarAccess.getMacFilterAccess().getGroup(), "rule__MacFilter__Group__0");
			builder.put(grammarAccess.getMacFilterAccess().getGroup_3(), "rule__MacFilter__Group_3__0");
			builder.put(grammarAccess.getNameFilterAccess().getGroup(), "rule__NameFilter__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_6(), "rule__Service__Group_6__0");
			builder.put(grammarAccess.getCharacteristicAccess().getGroup(), "rule__Characteristic__Group__0");
			builder.put(grammarAccess.getCharacteristicAccess().getGroup_7(), "rule__Characteristic__Group_7__0");
			builder.put(grammarAccess.getUIElementAccess().getGroup(), "rule__UIElement__Group__0");
			builder.put(grammarAccess.getUIElementAccess().getGroup_5(), "rule__UIElement__Group_5__0");
			builder.put(grammarAccess.getAppAccess().getNameAssignment_1(), "rule__App__NameAssignment_1");
			builder.put(grammarAccess.getAppAccess().getPackageNameAssignment_4(), "rule__App__PackageNameAssignment_4");
			builder.put(grammarAccess.getAppAccess().getSensorAssignment_5(), "rule__App__SensorAssignment_5");
			builder.put(grammarAccess.getAppAccess().getMacfilterAssignment_6(), "rule__App__MacfilterAssignment_6");
			builder.put(grammarAccess.getAppAccess().getNamefilterAssignment_7(), "rule__App__NamefilterAssignment_7");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getServiceAssignment_3(), "rule__Sensor__ServiceAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getServiceAssignment_4_1(), "rule__Sensor__ServiceAssignment_4_1");
			builder.put(grammarAccess.getMacFilterAccess().getMacaddressAssignment_2(), "rule__MacFilter__MacaddressAssignment_2");
			builder.put(grammarAccess.getMacFilterAccess().getMacaddressAssignment_3_1(), "rule__MacFilter__MacaddressAssignment_3_1");
			builder.put(grammarAccess.getNameFilterAccess().getNameAssignment_1(), "rule__NameFilter__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getUuidAssignment_4(), "rule__Service__UuidAssignment_4");
			builder.put(grammarAccess.getServiceAccess().getCharacteristicAssignment_5(), "rule__Service__CharacteristicAssignment_5");
			builder.put(grammarAccess.getServiceAccess().getCharacteristicAssignment_6_1(), "rule__Service__CharacteristicAssignment_6_1");
			builder.put(grammarAccess.getCharacteristicAccess().getNameAssignment_1(), "rule__Characteristic__NameAssignment_1");
			builder.put(grammarAccess.getCharacteristicAccess().getUuidAssignment_4(), "rule__Characteristic__UuidAssignment_4");
			builder.put(grammarAccess.getCharacteristicAccess().getDataTypeAssignment_6(), "rule__Characteristic__DataTypeAssignment_6");
			builder.put(grammarAccess.getCharacteristicAccess().getUnitAssignment_7_1(), "rule__Characteristic__UnitAssignment_7_1");
			builder.put(grammarAccess.getCharacteristicAccess().getReadAssignment_9(), "rule__Characteristic__ReadAssignment_9");
			builder.put(grammarAccess.getCharacteristicAccess().getWriteAssignment_11(), "rule__Characteristic__WriteAssignment_11");
			builder.put(grammarAccess.getCharacteristicAccess().getNotificationAssignment_13(), "rule__Characteristic__NotificationAssignment_13");
			builder.put(grammarAccess.getCharacteristicAccess().getUielementAssignment_14(), "rule__Characteristic__UielementAssignment_14");
			builder.put(grammarAccess.getUIElementAccess().getNameAssignment_1(), "rule__UIElement__NameAssignment_1");
			builder.put(grammarAccess.getUIElementAccess().getLabelAssignment_4(), "rule__UIElement__LabelAssignment_4");
			builder.put(grammarAccess.getUIElementAccess().getDescriptionAssignment_5_1(), "rule__UIElement__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getMacAddressAccess().getAddressAssignment(), "rule__MacAddress__AddressAssignment");
			builder.put(grammarAccess.getNameExpressionAccess().getRegExAssignment(), "rule__NameExpression__RegExAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BagDslGrammarAccess grammarAccess;

	@Override
	protected InternalBagDslParser createParser() {
		InternalBagDslParser result = new InternalBagDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BagDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BagDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

/*
 * generated by Xtext 2.17.0
 */
package bag.dsl.validation;

import org.eclipse.xtext.validation.Check;
import bag.model.bagEcore.Sensor;
import java.util.Set;
import java.util.HashSet;
import bag.model.bagEcore.Service;
import bag.model.bagEcore.Characteristic;
import bag.model.bagEcore.App;
import bag.model.bagEcore.MacAddress;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class BagDslValidator extends AbstractBagDslValidator {
	
	// Defined validation values
	public static String UNIQUE_NAME = "uniqueName";
	public static String WHITESPACE = "whitespace";
	public static String MACADDRESS = "macAddress";
	
	/**
	 * Validation rule to check if every given name of an element is unique. There shouldn't be any duplicate 'Service', 'Characteristic' or 'UiElement' names.
	 */
	@Check
	public void uniqueNameService(Sensor sensor) {
		Set<String> duplicateServices = new HashSet<String>();
		Set<String> duplicateCharacteristic = new HashSet<String>();
		Set<String> duplicateUiElements = new HashSet<String>();
		
		for(Service service : sensor.getService()) {
			if(!duplicateServices.add(service.getName())) {
				error("Duplicate service name: " + service.getName(), null , UNIQUE_NAME);
			}
			for(Characteristic characteristic : service.getCharacteristic()) {
				if(!duplicateCharacteristic.add(characteristic.getName())) {
					error("Duplicate characteristic name: " + characteristic.getName(), null , UNIQUE_NAME);
				}
				if(!duplicateUiElements.add(characteristic.getUielement().getName())) {
					error("Duplicate uielement name: " + characteristic.getUielement().getName(), null, UNIQUE_NAME);
				}
			}
		}
		
	}
	
	/**
	 * Validation rule to check element names for not allowed whitespace. There shouldn't be any whitespace in 'PackageName', 'Service'-name, 'Service'-uuid,
	 * 'Characteristic'-name, 'Characteristic'-uuid and 'UiElement'-name.
	 */
	@Check
	public void noWhitespaces(App app) {
		if(app.getPackageName().contains(" ")) {
			error("Package name: " + app.getPackageName() + " contains a not allowed whitespace", null, WHITESPACE);
		}
		for(Service service : app.getSensor().getService()) {
			if(service.getName().contains(" ")) {
				error("Service name: '" + service.getName() + "' contains a not allowed whitespace", null, WHITESPACE);
			}
			if(service.getUuid().contains(" ")) {
				error("Service uuid: '" + service.getUuid() + "' contains a not allowed whitespace", null, WHITESPACE);
			}
			for(Characteristic characteristic : service.getCharacteristic()) {
				if(characteristic.getName().contains(" ")) {
					error("Characteristic name: '" + characteristic.getName() + "' contains a not allowed whitespace", null, WHITESPACE);
				}
				if(characteristic.getUuid().contains(" ")) {
					error("Characteristic uuid: '" + characteristic.getUuid() + "' contains a not allowed whitespace", null, WHITESPACE);
				}
				if(characteristic.getUielement().getName().contains(" ")) {
					error("UiElement name: '" + characteristic.getUielement().getName() + "' contains a not allowed whitespace", null, WHITESPACE);
				}
			}
		}
	}
	
	/**
	 * Validation rule to check if the defined MAC-address matches the common pattern 'XX:XX:XX:XX:XX:XX'. 
	 */
	@Check
	def macAddressForm(App app) {
		if(app.macfilter !== null) {
			for(MacAddress macAddress : app.macfilter.macaddress) {
				if(!macAddress.address.matches("^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$")) {
					error('MacAddress : "' + macAddress.address + '" did not match required pattern XX:XX:XX:XX:XX:XX', null, MACADDRESS);
				}
			}
		}
	}
}
